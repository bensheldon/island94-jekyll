<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found
</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 29 Nov 2023 17:03:32 +0000</pubDate>
    <lastBuildDate>Wed, 29 Nov 2023 17:03:32 +0000</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
    
      
        




<item>
  <title>Reflections on GoodJob for Solid Queue</title>
  <description>&lt;p&gt;&lt;a href=&quot;/uploads/2023-10/rails_world_solid_queue.jpg&quot;&gt;&lt;img src=&quot;/uploads/2023-10/rails_world_solid_queue.jpg&quot; alt=&quot;Rails World presents Solid Queue and Mission Control&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GoodJob, via its &lt;a href=&quot;https://island94.org/2020/07/introducing-goodjob-1-0&quot;&gt;introductory blog post&lt;/a&gt;, was highlighted last week at Rails World. A new Active Job queue backend, &lt;a href=&quot;https://rubygems.org/gems/solid_queue&quot;&gt;Solid Queue&lt;/a&gt;, was announced, and I’m excited to see where it goes!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I attended Rails World in Amsterdam this past week. During the conference, a new Active Job backend was announced: Solid Queue (&lt;a href=&quot;https://www.youtube.com/watch?v=iqXjGiQ_D-A&amp;amp;t=3121s&quot;&gt;video&lt;/a&gt;), which has the potential to become first, first-party backend in Rails. Solid Queue, like my GoodJob, is backed by a relational database. I’m very excited about this! I had a chance to talk to Rosa Gutierrez, who is leading the effort at 37signals, and I’m hopeful that I’ll be able to contribute to Solid Queue and who knows, maybe it could even become a successor to GoodJob.&lt;/p&gt;

&lt;p&gt;With that thought in mind, I reflected on some of the design and motivations that became GoodJob, and that I believe are important regardless of the Active Job backend under development. These are not intended to be design documents but more a list of things that I have learned or come across during my 3 years working on GoodJob. It would be nice to keep these in mind when designing a potential successor to GoodJob. And I hope they can be the seed to further conversations, rather than a fully realized proposal or argument. Let’s go:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SIGKILL Safety&lt;/strong&gt;. Recovering from a SIGKILL (or someone unplugging the power cord) is always number one in my mind when thinking of GoodJob. That informed my desire to use Advisory Locks (which are automatically released on disconnect), and my future thinking about heartbeats if GoodJob switched over to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FOR UPDATE SKIP LOCK&lt;/code&gt; instead of Advisory Locks. I do not think jobs should be limited to a specific timeout (as Delayed Job’s design uses) as that also creates significant retry latency when resumed, and jobs definitely shouldn’t be wrapped with a transaction either.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(Human) Exception and Retry Workflows&lt;/strong&gt;. Everybody has a different workflow for how they deal with errors, and I believe that a backend needs to track, report (e.g. send to Sentry or Bugsnag) and expose the various reasons an error appears: retried, retry stopped, explicitly discarded, SIGKILLed/interrupted, unhandled error, etc. I still am dialing this in on GoodJob because there is wide variability of how people and teams manage their error workflows. I’m always learning something new. For example, there are very different answers on “when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retry_on SpecialError, attempts: 3&lt;/code&gt; should the 4th error be reported to the exception tracker? What about an explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discard_on&lt;/code&gt;? Should a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discard_on&lt;/code&gt; error be reviewed and reenqueued or not?” If a job is SIGKILLed/interrupted, should it be automatically restarted or held for manual review? Everyone seems to do it differently! I haven’t cracked the code on what is “ideal” or reasonable to say “nope, don’t do it &lt;em&gt;that&lt;/em&gt; way.” Active Job’s error handling isn’t clear cut either, so maybe we can make that better and come around to a more opinionated (but still inclusive) design. Maybe!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Process Harnesses&lt;/strong&gt;. I think it’s interesting that Rails might ship with a 1st party queue backend before it ships with a 1st party webserver: there is a lot of operational overlap. Signal handling, timeouts, daemonization, liveness and healthcheck probes, monitoring and scaling instrumentation. There’s quite a lot of ground to cover, and a lot different systems and tooling: Kubernetes,  systemd, rc.d, Heroku, Judoscale, to name just a few of the various operational targets that I’ve spent considerable time supporting.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Repeating Jobs / Clock Process&lt;/strong&gt;. It took me &lt;a href=&quot;https://github.com/bensheldon/good_job/issues/255&quot;&gt;a while to come around to this&lt;/a&gt; in GoodJob, but I believe that performing work &lt;em&gt;repetitively on a schedule&lt;/em&gt; (“cron-like”) is very much in the same problem-domain as background jobs. There’s lots of different ways to design it that I don’t feel strongly about, for example GoodJob minimizes autoloading by keeping schedules separate from job classes, but I do think it is necessary to plan for scheduled jobs in a well-architected Rails application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unique Jobs, Throttles, Fuses and other Concurrency Controls&lt;/strong&gt;,. Similarly to Repeating Jobs, demand is high for everything I’d bucket under “concurrency controls”, which I’ll say covers both enqueue and dequeue complexity. And these features are tough because they sit in counterbalance to overall performance: do you want to run jobs faster or smarter? And these are the features that I think are legit because there are other features below under Queue Design that I think are bunk. There’s a lot of discernment to do!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Queue design and multi-queue execution pools&lt;/strong&gt;. I do think queue design is a place where lots of people do it wrong. I believe queues should be organized by maximum total latency SLO (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latency_15s&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latency_15m&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latency_8h&lt;/code&gt;) and &lt;em&gt;not&lt;/em&gt; by their purpose or dependencies  (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;billing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api&lt;/code&gt;). &lt;a href=&quot;https://www.railsspeed.com/&quot;&gt;Nate Berkopec believes similarly.&lt;/a&gt; And I think that informs that &lt;strong&gt;execution pools (e.g. thread pools) should be able to work from multiple queues and have independent concurrency configuration (e.g. number of threads)&lt;/strong&gt;, both to ease transition from the latter to the former, but also because it allows sharing resources as optimally as possible (having 3 separate pools that pull from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;latency_15s&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;latency_15m, latency_15s&quot;&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;latency_8h,*&quot;&lt;/code&gt; in GoodJob’s syntax). I personally think concepts like priority or ordered-queues lead to bad queue design, so I wouldn’t sweat that. Any ordering regime more complex than first-in-first-out (FIFO) prioritizes capacity (or lack thereof) over latency. This might sound strange coming from me who champions running workloads in the webbrowser on tiny dynos, but it’s different in my mind: I don’t think it’s possible to meet a latency target through prioritization when there is a fundamental lack of capacity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Labels&lt;/strong&gt;. Per the previous point, though I have yet to implement this in GoodJob (soon!), I think that giving developers the option to label their jobs might break their bad habit of using queue names as functional labels, instead of what I believe queues should be appropriately used for: latency and quality-of-service thresholds. I mention it here just in case that informs Solid Queue’s design.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;. GoodJob maintains a lot of bookkeeping, keeping job and granular execution data around after execution so it can be inspected. People seem to like that, and it’s necessary to keep them around for calculating accurate latency metrics, though it all is a trade-off against performance. It makes for a fun Web Dashboard too.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance Envelope.&lt;/strong&gt; I dunno, I mention this just because I think people spend an inordinate amount of time comparing queue backend performance and asking “do the jobs go brrrrr?” GoodJob targets the small and medium end of projects (though some big ones use it too) and prioritizes operational simplicity over performance. That works for me (and a lot of others!) but also isn’t really reflective of the scale of companies leading Rails development. There’s a tension here.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Making better mistakes tomorrow&lt;/strong&gt;. I’m really proud of having a reputation for being helpful and responsive and curious in the GoodJob issue queue and discussions and various support Slacks (like &lt;a href=&quot;https://www.rubyonrails.link&quot;&gt;Rails Link&lt;/a&gt;). I think there is a lot to the queue backend domain that won’t be learned by upfront analysis, and that can’t be easily bucketed into either “the library is doing it wrong” or “the developer is doing it wrong” There’s a lot of variation! (not to mention across JRuby,etc. and various database versions). I’m able to do things with GoodJob that I think is unlikely on a 1st party Rails queue backend (like cutting a new release after every patch and fix), and I’m able to stay oriented to the people and the problem they’re trying to solve over the technological solution itself. I hope all that can be preserved as these things move upstream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! I’m probably forgetting stuff, so I’ll reserve the right to keep adding to this list. I’d love to keep talking about this and hope that Solid Queue will be fantastic!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Oh, and Solid Queue isn’t released yet, so if this seems compelling, &lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;use GoodJob&lt;/a&gt; in the meantime.&lt;/em&gt;&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/10/reflections-on-good-job-for-solid-queue&quot;&gt;Reflections on GoodJob for Solid Queue&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 10 Oct 2023 16:05:00 +0000</pubDate>
  <link>https://island94.org/2023/10/reflections-on-good-job-for-solid-queue</link>
  <guid isPermaLink="true">https://island94.org/2023/10/reflections-on-good-job-for-solid-queue</guid>
  
    <category>GoodJob</category>
  
    <category>Ruby</category>
  
  
</item>

      
    
      
        




<item>
  <title>Writing Object Shape friendly code in Ruby</title>
  <description>&lt;p&gt;Ruby 3.2 includes a performance optimization called Object Shapes, that changes how the Ruby VM stores, looks up, and caches instances variables (the variables that look like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ivar&lt;/code&gt;) . YJIT also takes advantage of Object Shapes, and the upcoming Ruby 3.3 has further improvements that improve the performance of Object Shapes.&lt;/p&gt;

&lt;p&gt;This is a brief blog post about how to write your own Ruby application code that is optimized for Object Shapes. If instead you’d like to learn more about how Object Shapes is implemented in Ruby, watch &lt;a href=&quot;https://www.youtube.com/watch?v=R0oxlyVUpDw&quot;&gt;Aaron Patterson’s RubyConf 2022 video&lt;/a&gt; or read this &lt;a href=&quot;https://poddarayush.com/posts/object-shapes-improve-ruby-code-performance/&quot;&gt;explanation from Ayush Poddar&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Big thank you to my colleagues John Hawthorn and Matthew Draper for feedback on the coding strategies described here. And John Bachir, Nate Matykiewicz, Josh Nichols, and Jean Boussier whose conversation in &lt;a href=&quot;https://www.speedshop.co/rails-performance-workshop.html&quot;&gt;Rails Performance Slack&lt;/a&gt; inspired it.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-general-rule-define-your-instance-variables-in-the-same-order-every-time&quot;&gt;The general rule: define your instance variables in the same order every time&lt;/h3&gt;

&lt;p&gt;To take advantage of Object Shape optimizations in your own Ruby Code, the goal is to minimize the number of different shapes of objects that are created and minimize the number of object shape transitions that occur while your application is running:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure that instances of the same class share the same object shape&lt;/li&gt;
  &lt;li&gt;Ensure that objects do not frequently or unnecessarily transition or change their shape&lt;/li&gt;
  &lt;li&gt;Help objects that &lt;em&gt;could&lt;/em&gt; share the same object shape (e.g. substitutable child classes) to do so, with reasonable effort and without compromising readability and maintainability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This succinct explanation is from &lt;a href=&quot;https://poddarayush.com/posts/object-shapes-improve-ruby-code-performance/&quot;&gt;Ayush Poddar&lt;/a&gt;, and explains the conditions that allow objects to share a shape:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;New objects with the same [instance variable] transitions will end up with the same shape. This is independent of the class of the object. This also includes the child classes since they, too, can re-use the shape transitions of the parent class. But, &lt;strong&gt;two objects can share the same shape only if the order in which their instance variables are set is the same.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s it, that’s what you have to do: if you want to ensure that two objects share the same shape, make sure they define their instance variables in the same order. Let’s start with a counterexample:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Bad: Object Shape unfriendly&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GroceryStore&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fruit&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vegetable&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@vegetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;broccoli&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The &quot;Application&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alpha_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GroceryStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alpha_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fruit&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# defines @fruit first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alpha_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vegetable&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# defines @vegetable second&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;beta_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GroceryStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;beta_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vegetable&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# defines @vegetable first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;beta_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fruit&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# defines #fruit second &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpha_store&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beta_store&lt;/code&gt; do not share the same object shape because the order in which their instance variables are defined depends on the order the application calls their methods. This code is not Object Shape friendly.&lt;/p&gt;

&lt;h3 id=&quot;pattern-define-your-instance-variables-in-initialize&quot;&gt;Pattern: Define your instance variables in initialize&lt;/h3&gt;

&lt;p&gt;The simplest way to ensure instance variables are defined in the same order every time is to define the instance variables in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#initialize&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Good: Object Shape friendly&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GroceryStore&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@vegetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# declare but assign later&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fruit&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vegetable&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@vegetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;broccoli&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;It’s also ok to define instance variables implicitly with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr_*&lt;/code&gt; methods in the class body, which has the same outcome of always defining the instance variables in the same order.&lt;/del&gt; &lt;strong&gt;Update&lt;/strong&gt;: Ufuk Kayserilioglu informed me that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr_*&lt;/code&gt; do not define the instance variable until they are first called, meaning that these methods or their associated instance variables should also be declared with a value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#initialize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now I realize this is a very simplistic example, but that’s really all there is to it. If it makes you feel better, at GitHub where I work, we have classes with upwards of 200 instance variables. In hot code, where we have profiled, we go to a negligible effort of making sure those instance variables are defined in the same order; it’s really not that bad!&lt;/p&gt;

&lt;h3 id=&quot;pattern-null-memoization&quot;&gt;Pattern: Null memoization&lt;/h3&gt;

&lt;p&gt;Using instance variables to memoize values in your code may present a challenge when nil is a valid memoized value. This is a common pattern in Ruby that is not Object Shape friendly:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Bad: Object Shape unfriendly&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GroceryStore&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fruit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an_expensive_operation&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rewrite this by creating a unique &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; constant and check for its presence instead:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Good: Object Shape friendly&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GroceryStore&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# not strictly necessary, but makes it Ractor-safe&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fruit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an_expensive_operation&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, if you’re doing a lot of meta or variable programming and you need an arbitrary number of memoized values, use a hash and key check instead:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Good: Object Shape friendly&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GroceryStore&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@produce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an_expensive_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it&lt;/h3&gt;

&lt;p&gt;Creating Object Shape friendly code is not very complicated!&lt;/p&gt;

&lt;p&gt;Please reach out if there’s other patterns I’m missing: bensheldon@gmail.com / &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;twitter.com/@bensheldon&lt;/a&gt; / &lt;a href=&quot;https://ruby.social/@bensheldon&quot;&gt;ruby.social/@bensheldon&lt;/a&gt;&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/10/writing-object-shape-friendly-code-in-ruby&quot;&gt;Writing Object Shape friendly code in Ruby&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 01 Oct 2023 15:05:00 +0000</pubDate>
  <link>https://island94.org/2023/10/writing-object-shape-friendly-code-in-ruby</link>
  <guid isPermaLink="true">https://island94.org/2023/10/writing-object-shape-friendly-code-in-ruby</guid>
  
    <category>Ruby</category>
  
  
</item>

      
    
      
        




<item>
  <title>In defense of consensus</title>
  <description>&lt;p&gt;There’s a style of reactionary meme that takes a photo of like, empty store-shelves or a trash-strewn street, and applies the image macro “This is what Communism looks like”. But upon closer inspection (and social media lampooning), it’s a photo of America, capitalist America, very much not under communism. We’ll come back to this.&lt;/p&gt;

&lt;p&gt;Let’s talk about “consensus”. Not a week goes by in my Bay Area tech worklife where I don’t read or hear someone dragging consensus. Consensus is pilloried: weak, indecisive, lowest-common denominator, unclear, drawn out… consensus is bad, they say.&lt;/p&gt;

&lt;p&gt;Working in tech for a decade, I have to admit this struck me as strange the first time I heard a coworker complain about that bogeyman “consensus”. I’ve been a facilitator of consensus-based practice for &lt;a href=&quot;https://island94.org/2010/04/I-am-now-a-Technology-of-Participation-facilitator-.html&quot;&gt;13 years&lt;/a&gt;. These practices, taught to me through the &lt;a href=&quot;https://www.ica-usa.org&quot;&gt;Institute for Cultural Affair’s ToP (“Technology of Participation”)&lt;/a&gt; series, served me well when I was doing nonprofit and community work, serving on boards and facilitating offsites. And consensus-based practices have served me well in tech and business too: using its methods to do discovery, lead meetings, get feedback, and drive decision-making and action. I do strategic planning consultation too.&lt;/p&gt;

&lt;p&gt;The consensus-based practices I’ve learned take a group through a process: beginning with a prompt or need, then collecting facts and inputs, understanding people’s reactions to them, their interpretations and implications, and ultimately describing a series of actions and commitments to take. This can be a simple conversation, or a multi-day event that builds fractally on itself: a preceding session’s final actions could be deciding on what will be the following session’s initial inputs. When I’m working with leaders to design the process, we’ll discuss what responsibilities we want to delegate to the group, and what decisions will be retained among leadership. Leadership remains &lt;em&gt;accountable&lt;/em&gt;, in the sense that there is a legible decision-making process, which is a strong benefit of deliberative practice. That’s “consensus”.&lt;/p&gt;

&lt;p&gt;Alternatively, the Bay Area tech process, not “consensus”, oh no, seems to follow these recipes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plan and socialize&lt;/li&gt;
  &lt;li&gt;Disagree and commit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was introduced to “plan and socialize” in my second tech job, being mentored by the Director of Engineering. To “socialize” is more than informing people, it’s having conversations and helping them understand how a plan or proposal will affect their work, and getting feedback that might lead to adjustments or compensatory actions. It’s also somewhat vague: asking people to leave comments in a google doc, attend an office hours, or a loosely moderated feedback session. Decisions, once made, are also socialized: explained, defended, adjusted, or white-knuckled through.&lt;/p&gt;

&lt;p&gt;Depending on their power level, leaders may then ask people to “disagree and commit” meaning that the (negative) feedback has been heard but those underlings must commit to carrying the plan out regardless. Suck it up, professionally, so to speak. Sometimes this is used as performance feedback: “I’m aware you’ve been sharing your dislike of the plan with coworkers. That lack of trust is undermining the business. I need you to disagree and commit”… and keep your thoughts to yourself.&lt;/p&gt;

&lt;p&gt;Under the spotlight, these approaches look less like bold and steely decision-making, and more like mumbly plan shifting backed by blusterful threats. Like the “this is what communism looks like”-meme, the scary-othered threat is not “consensus” but simply the current reality: confused, inadequate, probationary, triangulating, embarrassing, shameful.&lt;/p&gt;

&lt;p&gt;There’s a joke in civic tech: government tech projects may say they can’t do incremental development, but that’s exactly what happens after their big-bang waterfall launch crashes-and-burns and they end up having to fix it one piece at a time. Clay Shirky captures it in &lt;a href=&quot;https://www.politico.com/magazine/story/2013/11/the-willful-ignorance-that-doomed-healthcaregov-100290/&quot;&gt;“How Willful Ignorance Doomed HealthCare.gov”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is hard for policy people to imagine that HealthCare.gov could have had a phased rollout, &lt;em&gt;even while it is having one&lt;/em&gt;. At launch, on Oct. 1, only a tiny fraction of potential users could actually try the service. They generated errors. Those errors were handed to a team whose job was to improve the site, already public but only partially working. The resulting improvements are incremental and put in place over a period of months. That &lt;em&gt;is&lt;/em&gt; a phased rollout, just one conducted in the worst possible way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bay Area tech has the same relationship to decisions and consensus: by “socializing” plans and decisions, leaders are trying to craft a deliberativeu process for information sharing, feedback gathering, and alignment building. They’re simply doing it &lt;em&gt;after&lt;/em&gt; they’ve already written and decided on an insufficient course of action and are grasping for a fix. Ultimately they are reaching for consensus, just consensus conducted in the worst possible way.&lt;/p&gt;

&lt;p&gt;Please think of this the next time you hear (or say) something bad about consensus. Consensus is pretty great, and even better when used from the start.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Institute for Cultural Affairs has &lt;a href=&quot;https://www.top-training.net/w/schedule/&quot;&gt;lots of trainings&lt;/a&gt;  on consensus-based facilitation. The &lt;a href=&quot;https://strategicfacilitation.com&quot;&gt;Center for Strategic Facilitation&lt;/a&gt; is the Bay Area’s local trainer and service provider, but there are trainers and service providers all over the globe.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There is a system known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_consensus&quot;&gt;“Formal Consensus”&lt;/a&gt; which gained some notability during the &lt;a href=&quot;https://en.wikipedia.org/wiki/1999_Seattle_WTO_protests&quot;&gt;1999 “Battle of Seattle” WTO protests&lt;/a&gt; as a means of empowering small groups, particularly indigenous representatives, by providing a limited and fixed number of “blocks” during deliberations to stop actions proposed by far larger groups. Also how my buddy organized &lt;a href=&quot;https://github.com/freegeekchicago/fgc-docs/blob/4dc37cbb76eaf766274f30fcb1f9df9d5bc199df/constitution.md#governance&quot;&gt;FreeGeek Chicago&lt;/a&gt;. I have &lt;strong&gt;never&lt;/strong&gt; heard anyone in Bay Area tech reference any of this in regards to what they mean by consensus.&lt;/em&gt;&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/09/in-defense-of-consensus&quot;&gt;In defense of consensus&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 18 Sep 2023 02:30:00 +0000</pubDate>
  <link>https://island94.org/2023/09/in-defense-of-consensus</link>
  <guid isPermaLink="true">https://island94.org/2023/09/in-defense-of-consensus</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Appropriately using Ruby’s Thread.handle_interrupt</title>
  <description>&lt;p&gt;Working on &lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt;, I spend a lot of time thinking about multithreaded behavior in Ruby. One piece of Ruby functionality that I don’t see written about very often is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.handle_interrupt&lt;/code&gt;. &lt;em&gt;Big thanks to John Bachir and Matthew Draper for talking through its usage with me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some background about interrupts:&lt;/strong&gt; In Ruby, exceptions can be raised anywhere and at anytime in a thread by other threads (including the main thread, that’s how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeout&lt;/code&gt; works). Even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rescue&lt;/code&gt; and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure&lt;/code&gt; blocks can be interrupted. Everywhere. Most of the time this isn’t something you need to think about (unless you’re &lt;a href=&quot;https://github.com/ankane/the-ultimate-guide-to-ruby-timeouts&quot;&gt;using Timeout&lt;/a&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rack-timeout&lt;/code&gt; or doing explicit multithreaded code). But if you are, it’s important to think and code defensively.&lt;/p&gt;

&lt;p&gt;Starting with an example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;open_work&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;do_work&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# wait some time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or thread.raise&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, it’s possible that the exception raised by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread.kill&lt;/code&gt; will interrupt the middle of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure&lt;/code&gt; block. That’s bad! And can leave that work in an inconsistent state.&lt;/p&gt;

&lt;p&gt;Ruby’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.handle_interrupt&lt;/code&gt; is the defensive tool to use. It allows for modifying when those interrupting exceptions are raised:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# :immediate is the default and will interrupt immediately&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:immediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# :on_blocking interrupts only when the GVL is released &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# e.g. IO outside Ruby&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:on_blocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# :never will never interrupt during that block&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.handle_interrupt&lt;/code&gt; will modify behavior for the duration of the block, and it will then raise the interrupt after the block exits. It can be nested too:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:on_blocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ruby_stuff&lt;/span&gt;
  
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;really_important_work&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;file_io&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;= this can be interrupted&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;FYI BE AWARE:&lt;/strong&gt; Remember, the interrupt behavior is only affected &lt;em&gt;within&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_interrupt&lt;/code&gt; block. The following code &lt;strong&gt;has a problem&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;open_work&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;do_work&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can you spot it? It’s right here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &amp;lt;- Interrupts can happen right here&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a “seam” right there between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.handle_interrupt&lt;/code&gt; where interrupts &lt;em&gt;can happen!&lt;/em&gt; Sure, it’s probably rare that an interrupt would hit right then and there, but if you went to the trouble to guard against it, it’s likely very bad if it did happen. And it happens!  &lt;a href=&quot;https://itnext.io/why-puma-workers-constantly-hung-and-how-we-fixed-by-discovering-the-bug-of-ruby-v2-5-8-and-v2-6-6-7fa0fd0a1958&quot;&gt;“Why puma workers constantly hung, and how we fixed by discovering the bug of Ruby v2.5.8 and v2.6.6”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HOW TO USE IT APPROPRIATELY:&lt;/strong&gt; This is the pattern you likely want:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:immediately&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;open_work&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;do_work&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s right: have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure&lt;/code&gt; block nested within the outer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.handle_interrupt(Exception: :never)&lt;/code&gt; so that interrupts cannot happen in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure&lt;/code&gt;, and then use a second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.handle_interrupt(Exception: :immediately)&lt;/code&gt; to allow the interrupts to take place in the code &lt;em&gt;before&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;There’s another pattern you might also be able to use with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:on_blocking&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:on_blocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open_work&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_work&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Doesn’t that have the problematic seam? Nope, because when under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:on_blocking&lt;/code&gt; there isn’t an operation taking place right there would release the GVL (e.g. no IO).&lt;/p&gt;

&lt;p&gt;But it does get tricky if, for example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_work&lt;/code&gt; is some Ruby calculation that is unbounded (I dunno, maybe a problematic regex or someone accidentally decided to calculate prime numbers or something). Then the Ruby code will not be interrupted at all and your thread will hang. That’s bad too. So you’d then need to do something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:on_blocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open_work&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:immediately&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;do_work&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;close_work&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See, it’s ok to nest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.handle_interrupt&lt;/code&gt; and likely &lt;em&gt;necessary&lt;/em&gt; to achieve the safety and defensiveness you’re expecting.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/08/appropriately-using-rubys-thread-handle_interrupt&quot;&gt;Appropriately using Ruby’s Thread.handle_interrupt&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 31 Aug 2023 00:41:00 +0000</pubDate>
  <link>https://island94.org/2023/08/appropriately-using-rubys-thread-handle_interrupt</link>
  <guid isPermaLink="true">https://island94.org/2023/08/appropriately-using-rubys-thread-handle_interrupt</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Fake the algorithm til you make it</title>
  <description>&lt;p&gt;Almost exactly a decade ago I worked at OkCupid Labs where small teams (~2 engineers, a designer, and a fractional PM) would build zero-to-one applications. It was great fun and I worked mainly on &lt;a href=&quot;https://island94.org/2013/07/Meet-Ravel.html&quot;&gt;Ravel!&lt;/a&gt; though bopped around quite a bit too.&lt;/p&gt;

&lt;p&gt;With small teams and quick timelines, I learned a lot about where to invest time in early social apps (onboarding and core loop) and where not to (matchmaking algorithms). The following is lightly adapted from a bunch of comments I wrote on an r/webdev post a few years ago, asking for &lt;a href=&quot;https://www.reddit.com/r/webdev/comments/pey1p7/comment/%2Chb4gik2%2C/&quot;&gt;“Surprisingly simple web apps?”&lt;/a&gt;. My response was &lt;a href=&quot;https://www.reddit.com/r/webdev/comments/pey1p7/comment/hb4gpxy/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;described&lt;/a&gt; as “one of the more interesting things I’ve read on reddit in 5 years”:&lt;/p&gt;

&lt;p&gt;If you’re looking for inspiration, what is successful today is likely more complex than it was when it was originally launched. Twitter, Tinder, Facebook all likely launched with simple CRUD and associations, and only later did they get fancy algorithms. Also, Nextdoor, Grindr, Yelp [this was 2013].&lt;/p&gt;

&lt;p&gt;I used to work on social and dating apps and it is all “fake it till you make it”. The “secret sauce” is bucket by distance intervals, then order by random using the user-id as a seed so it’s determinist, but still just random sort. Smoke and mirrors and marketing bluster.&lt;/p&gt;

&lt;p&gt;You see this “Secret Sauce” marketing a lot. An app will imply that they have some secret, complex algorithm that no other competitor has. The software equivalent of “you can get a hamburger from anywhere, but ours has our secret sauce that makes it taste best”. But that can be bluster and market positioning rather than actually complexity. In truth, it’s secretly mayo, ketchup and relish. Or as I’ve encountered building apps, deterministic random.&lt;/p&gt;

&lt;p&gt;Imagine you have a dating/social app and you want to have a match-making algorithm. You tell your users that you have the only astrologist datascience team building complex machine-learning models that can map every astronomical body in the known universe to individual personality traits and precisely calculate true love to the 9th decimal.&lt;/p&gt;

&lt;p&gt;In truth, you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For the current user, bucket other users by distance: a bucket of users that are less than 5km away; less than 25km; less than 100km; and everyone else. Early social app stuff is hard because you have a small userbase but you need to appear to be really popular, so you may need to adjust those numbers; also a reason to launch in a focused market.&lt;/li&gt;
  &lt;li&gt;Within each distance bucket, simply sort the users by random, seeded by the user id of the current user (Postgres &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setseed&lt;/code&gt;). That way the other people will always appear in the same order to the current user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works on people’s confirmation bias: if you confidently tell someone that they are a match, they are likely to generate their own evidence to support that impression. You don’t even have to do the location bucketing either, but likely you want to give people something that is actionable for your core loop.&lt;/p&gt;

&lt;p&gt;And remember, this is really about priorities in the early life of a product. It’s not difficult to do something complex, but it takes time and engaged users to dial it in; so that’s why you don’t launch with a real algorithm.&lt;/p&gt;

&lt;p&gt;This is all really easy to do with just a relational database &lt;em&gt;in the database&lt;/em&gt;, no in-memory descent models or whatever. Here’s a simple recommendation strategy for t-shirts (from my &lt;a href=&quot;https://dayoftheshirt.com&quot;&gt;Day of the Shirt&lt;/a&gt;), in SQL for Ruby on Rails:&lt;/p&gt;

&lt;p&gt;For a given user, find all of the t-shirts they have favorited, then find all of the users that have also favorited those t-shirts and strength them based on who has favorited the most t-shirts in common with the initial user, and then find all of the t-shirts those users have favorited, multiply through the counts and strengths, sum and order them. There’s your recommended t-shirts:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shirts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:order_by_recommended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;squish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;strength DESC NULLS LAST&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
      LEFT JOIN (
        WITH recommended_users AS (
          SELECT user_id, count(*) AS strength
          FROM favorite_shirts_users
          WHERE
            shirt_id IN (
              SELECT shirt_id
              FROM favorite_shirts_users
              WHERE &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanitize_sql_for_conditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;user_id = ?&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
            )
          GROUP BY user_id
        )
        SELECT shirt_id, SUM(strength) AS strength
        FROM favorite_shirts_users
        LEFT JOIN recommended_users ON recommended_users.user_id = favorite_shirts_users.user_id
        GROUP BY shirt_id
      ) AS recommended_shirts ON recommended_shirts.shirt_id = shirts.id
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;    SQL&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s a relatively lightweight strategy, that you can run in real-time and if there is enough engagement can appear effective. And if you don’t have enough engagement, again, enrich it with some deterministically random results.&lt;/p&gt;

&lt;p&gt;It’s basic but you can also add in other kinds of engagement and weigh them differently or whatever. It’s all good. Then you have massive success and hire a real datascience team.&lt;/p&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/08/fake-the-algorithm-til-you-make-it&quot;&gt;Fake the algorithm til you make it&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Wed, 30 Aug 2023 22:50:00 +0000</pubDate>
  <link>https://island94.org/2023/08/fake-the-algorithm-til-you-make-it</link>
  <guid isPermaLink="true">https://island94.org/2023/08/fake-the-algorithm-til-you-make-it</guid>
  
  
</item>

      
    
      
        




<item>
  <title>How to isolate I18n configuration in a Rails Engine</title>
  <description>&lt;p&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt; is a multithreaded, Postgres-based, Active Job backend for Ruby on Rails.&lt;/p&gt;

&lt;p&gt;GoodJob includes an administrative web dashboard that is packaged as a mountable Rails Engine. The dashboard is currently translated into 8 different languages: English, German, Spanish, French, Japanese, Dutch, Russian, Turkish, and Ukrainian (I’d love your help improving these and translating additional languages too). Demo here: &lt;a href=&quot;https://goodjob-demo.herokuapp.com/&quot;&gt;https://goodjob-demo.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have learned quite a lot during the GoodJob development process about internationalizing a Rails Engine. I’ve previously worked on rather large and complicated localized government welfare applications, so I’m familiar with localization in the context of a Rails app. But internationalizing a Rails Engine was new, getting it right was harder than I expected, and I had trouble finding documentation and code examples in other libraries.&lt;/p&gt;

&lt;p&gt;Overall, internationalizing a Rails Engine was &lt;em&gt;nearly&lt;/em&gt; identical to the process of internationalizing a Rails Application as covered in the &lt;a href=&quot;https://guides.rubyonrails.org/i18n.html&quot;&gt;Rails Guides&lt;/a&gt;: using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n&lt;/code&gt; library and extracting strings from ERB views into keyed configuration files (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/locales/en.yml&lt;/code&gt;) and replacing them with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;%= t(&quot;.the.key&quot;) %&amp;gt;&lt;/code&gt; . Simple.&lt;/p&gt;

&lt;p&gt;The difficult part was separating and isolating GoodJob’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n&lt;/code&gt; configuration from the parent applications.&lt;/p&gt;

&lt;h3 id=&quot;why-is-it-necessary-to-isolate-i18n&quot;&gt;Why is it necessary to isolate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;As a mountable Rails Engine, GoodJob’s dashboard sits &lt;em&gt;within&lt;/em&gt; a parent Rails application. GoodJob should step lightly.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n&lt;/code&gt; library provides a number of configuration options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.current_locale&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.default_locale&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.available_locales&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.enforce_available_locales&lt;/code&gt; , which will raise an exception if the locale is switched to one not contained within the set of available locales.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s possible that GoodJob’s administrative web dashboard would have different values for these than the parent Rails Application. Imagine: An English and Ukrainian speaking development and operations team administering a French and German language only website. How to do it?&lt;/p&gt;

&lt;h3 id=&quot;isolating-configuration-values&quot;&gt;Isolating configuration values&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n&lt;/code&gt; configuration needs to be thread-local, so that a multithreaded webserver like Puma can serve a web request to the GoodJob Dashboard in Ukrainian (per the previous scenario) while &lt;em&gt;also&lt;/em&gt; serving a web request for the parent Rails application in French (or raise an exception if someone tries to access it in Italian).&lt;/p&gt;

&lt;p&gt;Unfortunately,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.current_locale&lt;/code&gt; is the only configuration value that delegates to a thread-locale variable. All other configuration values are &lt;a href=&quot;https://github.com/ruby-i18n/i18n/blob/7cf09474b77fd41e65d979134b0525f67cf371b0/lib/i18n/config.rb#L58&quot;&gt;implemented as global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@@&lt;/code&gt; class variables&lt;/a&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.config&lt;/code&gt;. This makes sense when thinking of a monolithic application, but not when a Rails application is made up of multiple Engines or components that serve different purposes and audiences (the frontend visitor and the backend administrator). I struggled &lt;em&gt;a lot&lt;/em&gt; figuring out a workaround for this, until I discovered that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.config&lt;/code&gt; is &lt;em&gt;also&lt;/em&gt; thread-local.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swap out the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.config&lt;/code&gt;  value with your Engine’s own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n::Config&lt;/code&gt;-compatible object:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/good_job/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GoodJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;around_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:use_good_job_locale&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use_good_job_locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@original_i18n_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18nConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@original_i18n_config&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@original_i18n_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# lib/good_job/i18n_config.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GoodJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I18nConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;BACKEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AVAILABLE_LOCALES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config/locales&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.yml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.yml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AVAILABLE_LOCALES_SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AVAILABLE_LOCALES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backend&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;BACKEND&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;available_locales&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;AVAILABLE_LOCALES&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;available_locales_set&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;AVAILABLE_LOCALES_SET&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default_locale&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;GoodJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dashboard_default_locale&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s the PR with the details that also shows the various complications I had introduced prior to finding this better approach: &lt;a href=&quot;https://github.com/bensheldon/good_job/pull/1001&quot;&gt;https://github.com/bensheldon/good_job/pull/1001&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;isolating-rails-formatters&quot;&gt;Isolating Rails Formatters&lt;/h3&gt;

&lt;p&gt;The main reason I implemented GoodJob’s Web Dashboard as a Rails Engine is because I want to take advantage of all of Rail’s developer niceties, like time and duration formatters. These are also necessary to isolate, so that GoodJob’s translations don’t leak into the parent application.&lt;/p&gt;

&lt;p&gt;First, time helper translations should be namespaced in the yaml translation files:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/locales/en.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;good_job&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;distance_in_words&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, for each helper, here’s how to scope them down:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_to_human(number, unit: &quot;good_job.number&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_ago_in_words(timestamp, scope: &quot;good_job.datetime.distance_in_words&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, there is a great repository of translations for Rails helpers here: &lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/tree/64e3b0e59994cc65fbc47046f9a12cf95737f9eb/rails/locale&quot;&gt;https://github.com/svenfuchs/rails-i18n/tree/64e3b0e59994cc65fbc47046f9a12cf95737f9eb/rails/locale&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h3&gt;

&lt;p&gt;Whenever I work on internationalization in Rails, I have to give a shoutout for the &lt;a href=&quot;https://github.com/glebm/i18n-tasks&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i18n-tasks&lt;/code&gt; library&lt;/a&gt;, which has been invaluable in operationalizing translation workflows: surfacing missing translation, normalizing and linting yaml files, making it easy to export the whole thing to a spreadsheet for review and correction, or using machine translation to quickly turn around a change (I have complicated feelings on that!).&lt;/p&gt;

&lt;p&gt;Internationalizing GoodJob has been a fun creative adventure. I hope that by writing this that other Rails Engine developers prioritize internationalization a little higher and have an easier time walking in these footsteps. And maybe we’ll make the ergonomics of it a little easier upstream too.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/08/how-to-isolate-i18n-configuration-in-a-rails-engine&quot;&gt;How to isolate I18n configuration in a Rails Engine&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 22 Aug 2023 13:54:00 +0000</pubDate>
  <link>https://island94.org/2023/08/how-to-isolate-i18n-configuration-in-a-rails-engine</link>
  <guid isPermaLink="true">https://island94.org/2023/08/how-to-isolate-i18n-configuration-in-a-rails-engine</guid>
  
    <category>GoodJob</category>
  
    <category>Ruby on Rails</category>
  
  
</item>

      
    
      
        






<item>
  <title>I read &quot;Recoding America&quot; by Jen Pahlka</title>
  <description>&lt;p&gt;The last time I communicated with Jen Pahlka was in the early days of the pandemic: May 2020. No longer locked down but still heavily masked, I visited the San Francisco Ferry Building Farmers Market and bought some fava beans. In the years before the pandemic, Jen had brought her own harvest of fava beans into the Code for America offices and shared them with any staff who wanted them. That had been my very first experience with fresh fava beans: shelling and boiling and shelling them a second time. Now, again with fresh fava beans in hand again, I thought of Jen amidst the pandemic turmoil. I sent her a short email hoping she was well. Jen never replied.&lt;/p&gt;

&lt;p&gt;Jen’s book, &lt;em&gt;Recoding America&lt;/em&gt; is a good book. It is a laundry list of scenes and vignettes of the greatest hits of government technology, albeit in language of elites discussing elite things in a bloodless elite way. Paired with a more hands-on manual like Cyd Harrell’s &lt;a href=&quot;https://cydharrell.com/book/?amp&quot;&gt;&lt;em&gt;A Civic Technologists Practice Guide&lt;/em&gt;&lt;/a&gt; it covers the ground of the past decade.&lt;/p&gt;

&lt;p&gt;That decade is an interesting one. Jen and I shared roughly the same tenure at Code for America: 2011 - 2020 for her, 2012 - 2022 for me; both of us with a gap in the middle. Of course, she was the founder and CEO, whereas I was a fellow, and then an engineer, then a manager, then a director. So we saw a lot of the same things, though from different vantage points on a different journey. In addition to my formal duties, which had a finger in every program at Code for America (if not an arm and leg) there were two activities that were initially happenstance but ended up turning into personal programss of mine:&lt;/p&gt;

&lt;p&gt;First, I reached out to new hires, especially new people managers, and offered to have a casual 1:1 and welcome them to the organization. We would chitchat and the message I would work to impart was this: the dissonance between Code for America’s competent external brand and its lived internal chaos could chew people up and was ripe for gaslighting. Instead, those new hires should remember they deserved to be here, they should trust their experience and competence, and truly everyone is winging it (some nicer and more self-aware about it than others).&lt;/p&gt;

&lt;p&gt;I’d tell them a story about a prior illuminating executive AMA with Jen where she had shared a philosophy: instead of drawing a bullseye on the wall and trying to hit it down the center with your programs and activities, you can simply throw stuff at the wall and draw the bullseye afterwards around what sticks.&lt;/p&gt;

&lt;p&gt;Second, my desk overlooked the executive conference room, which was a glass fishbowl with a couch. It was not infrequent for people to leave that room in a mess of hot tears. When they did and I saw, I’d send them a Slack message and gently offer to buy them a coffee at the Blue Bottle around the corner from the office. There was no ulterior motive; working through it with my leadership coach, a protege of financier Carl Icahn: I simply operationalized giving a shit about people.&lt;/p&gt;

&lt;p&gt;Compared to writing a book or leading an organization or serving as a government executive for a year, as Intel CEO Andy Grove might observe: my activities were not high leverage. They also fall outside the bullseye drawn around the stories of the book.&lt;/p&gt;

&lt;p&gt;We’re all heroes of our own story. The book briefly touches on an employee who describes himself as “the new guy” because he’d only been a claims processor for 17 years, far less than his more senior colleagues, and still not enough to be capable of processing the department’s most complex claims. His offhand comment is a foil for a deep dive into classifications and processing bottlenecks and mythical man months, but not much else about him as a person. Or what I imagine is the multitudes contained in that brief remark. Is it self-protection, a humblebrag, an invitation for further dialogue about those 17 years, or the years ahead? I’ll never know because the focus shifts back to the administrator and her institutional processes.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Zen and the Art of Motorcycle Maintenance&lt;/em&gt;, a professor advises a student who is hopelessly writers-blocked; the student wants to write about the history of the United States, but is gently redirected to first focus on one brick in one building on the main street of their college town. Writers block broken, the student cannot stop writing, successfully building towards their initial wide vision.&lt;/p&gt;

&lt;p&gt;The first brick of this book is possibly the few people “who had all once been part of the team that keeps Google up and running, then had come to DC to help get healthcare.gov back on track.” Easily overlooked in a footnote, they now run a private consultancy for government. The book frames their work as a series of high stakes technology and leadership interventions but not their personal stories, motivations, finances (business and personal), deal flow, engagement philosophy and practices, their loves, losses, missed opportunities, sacrifices, shames, human complexities, ironies, paradoxes. There is no crying, no dying, no problematic influencers, no sketchy investors nor strange bedfellows, no grudgefull quitting, no harassment, no union busting. Nor ziplines, chickens, joyful tears, pirate flags, PDF-form frostings from the sexy-cake shop down the street, nor fava beans for that matter.&lt;/p&gt;

&lt;p&gt;In reviewing why too much law and policy ultimately ends up in the courts, &lt;em&gt;Recoding America&lt;/em&gt; references a criticism by Ezra Klein: “liberals are too often missing or too timid to claim: a vision of what the law is for.” &lt;em&gt;Recoding America&lt;/em&gt; similarly fails here to share a compelling vision of just what civic technology is for. It describes the work of pushing the rock, but without a destination in mind. Every over, under, and through of the bear hunt, without describing the bear. A road built by walking… a division of men gathering wood for a ship… you get the idea.&lt;/p&gt;

&lt;p&gt;In all, if you care about civic technology and want to know the major story points: read the book. I am hoping it moves the Overton Window on the stories people will tell about civic tech. Please, someone write our movement’s _&lt;a href=&quot;https://www.goodreads.com/book/show/1929329&quot;&gt;Sex and Broadcasting&lt;/a&gt;, the humanistic tome of my prior career in community media and community technology. (Sociologist’s Karina Alexis Rider’s &lt;a href=&quot;https://qspace.library.queensu.ca/handle/1974/28956&quot;&gt;“Volunteering the Valley: Designing technology for the common good in the San Francisco Bay Area”&lt;/a&gt;  suffices in the meantime.)&lt;/p&gt;

&lt;p&gt;Lastly and memorably, Jen recounts serving on a task force addressing pandemic unemployment insurance. Writing with a vague yet startling honesty that haunts my own recollections:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The state should not have needed a task force to tell the EDD what it already knew, and it shouldn’t have needed us to secure permission to act on it. These things are never said out loud—neither the permission we had nor [administrator]  Paula’s lack of it. But when we were gone, so was that permission. And soon after, for reasons that were not clear to me, a new backlog began to accrue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This passage brings into focus the qualities that characterize my own experience with civic tech: power, permission, access, the parasocial qualities of professional relationships, and the fleeting closures of our ongoing experiments to live together in liberal democracy. I hope Jen is doing well, and though I didn’t write this explicitly in my last email, I’d love to hear from her.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This book review for &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/08/recoding-america&quot;&gt;Recoding America&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 17 Aug 2023 13:51:00 +0000</pubDate>
  <link>https://island94.org/2023/08/recoding-america</link>
  <guid isPermaLink="true">https://island94.org/2023/08/recoding-america</guid>
</item>

      
    
      
        




<item>
  <title>Systems of utopia</title>
  <description>&lt;p&gt;I found these two essays juxtaposed in my feed reader and they both rang true. The first is Matt Stoller’s &lt;a href=&quot;https://www.thebignewsletter.com/p/the-long-annoying-tradition-of-anti&quot;&gt;“The Long Annoying Tradition of Anti-Patriotism”&lt;/a&gt;, with a particular emphasis on a disordered appeal to utopia in society at large (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Anti-populism, and its cousin of anti-patriotism, is alluring for our elites. Many lack faith in fellow citizens, and think the work of convincing a large complex country isn’t worth it, or may not even be possible. &lt;strong&gt;Others can’t imagine politics itself as a useful endeavor because they believe in a utopia.&lt;/strong&gt; Indeed, those who believe in certain forms of socialism and libertarianism believe that politics itself shouldn’t exist, that one must perfect the soul of human-kind, and then the messy work of making a society will become unnecessary. In this frame, political institutions, like courts, corporations, and government agencies, are unimportant except as aesthetic objects.&lt;/p&gt;

  &lt;p&gt;Anti-populism and anti-patriotism leads nowhere, because these attitudes are about convincing citizens to give up their power, to give up on the idea that America is a place we can do politics to make a society.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;And then closer to work, on engineering leadership in Will Larsen’s &lt;a href=&quot;https://lethain.com/building-prestige/&quot;&gt;“Building personal and organizational prestige”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;In my experience, &lt;strong&gt;engineers confronted with a new problem often leap to creating a system to solve that problem rather than addressing it directly&lt;/strong&gt;. I’ve found this particularly true when engineers approach a problem domain they don’t yet understand well, including building prestige.&lt;/p&gt;

  &lt;p&gt;For example, when an organization decides to invest into its engineering brand, the initial plan will often focus on project execution. It’ll include a goal for publishing frequency, ensuring content is representationally accurate across different engineering sub-domains, and how to incentivize participants to contribute. If you follow the project plan carefully, you will technically have built an engineering brand, but my experience is that it’ll be both more work and less effective than a less systematic approach.&lt;/p&gt;

&lt;/blockquote&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/07/systems-of-utopia&quot;&gt;Systems of utopia&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 13 Jul 2023 15:24:00 +0000</pubDate>
  <link>https://island94.org/2023/07/systems-of-utopia</link>
  <guid isPermaLink="true">https://island94.org/2023/07/systems-of-utopia</guid>
  
  
</item>

      
    
      
        




<item>
  <title>19 sales &amp; marketing strategies in 19 weeks</title>
  <description>&lt;p&gt;The book &lt;a href=&quot;https://www.goodreads.com/pt/book/show/24693635-traction&quot;&gt;&lt;em&gt;Traction&lt;/em&gt;&lt;/a&gt;, by Gabriel Weinberg and Justin Mares has an unstated thesis I find compelling:&lt;/p&gt;

&lt;p&gt;Comprehensive, grinding, tryhard mediocrity over narrow, stabby, hopeful genius.&lt;/p&gt;

&lt;p&gt;Or: boil the sales &amp;amp; marketing ocean with these spreadsheets and punchlists (a marketing lifestyle I associate with Penny Arcade’s &lt;a href=&quot;https://www.reddit.com/r/IAmA/comments/nx0bs/comment/c3cm3zm/&quot;&gt;former business manager&lt;/a&gt; with &lt;a href=&quot;https://web.archive.org/web/20120107151014/http://penny-arcade.com/khoo/viral&quot;&gt;stuff like this&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are lots of quotes from like Paul Graham, Peter Thiel, Marc Andreesen. This is what one signs up for in a book like this. Also replace “traction” with “sales and marketing”:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…spend your time constructing your product or service and testing traction channels &lt;em&gt;in parallel&lt;/em&gt;…. We strongly believe that many startups give up way too early… You should always have an explicit traction goal you’re working toward.&lt;/p&gt;

  &lt;p&gt;…The importance of choosing the right traction goal cannot be overstated. Are you going for growth or “profitability, or something in between? If you need to raise money in X months, what traction do you need to show to do so? These are the types of questions that help you determine the right traction goal.&lt;/p&gt;

  &lt;p&gt;Once that is defined, you can work backward and set clear quantitative and time-based traction subgoals, such as reaching one thousand customers by next quarter or hitting 20 percent monthly growth targets. Clear subgoals provide accountability. By placing traction activities on the same calendar as product development and other company milestones, you ensure that enough of your time will be spent on traction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It feels a little dumb pulling out quotes, but also I get security from seeing it not be overthought:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put half your efforts into getting traction&lt;/li&gt;
  &lt;li&gt;Learn what growth numbers potential investors respect&lt;/li&gt;
  &lt;li&gt;Set your growth goals: Set quantitative numbers.&lt;/li&gt;
  &lt;li&gt;Find your bright spots: if not hitting quantitative numbers, who is qualitively excited and try to learn from them and replan.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then the spreadsheets. There are pictures of spreadsheets, and descriptions of columns in spreadsheets. It’s great!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How much will it cost to acquire customers through this channel?&lt;/li&gt;
  &lt;li&gt;How many customers are available through this channel&lt;/li&gt;
  &lt;li&gt;Are the customers that you are getting through this channel the kind of customers that you want right now?&lt;/li&gt;
  &lt;li&gt;What’s the lifetime value of this customer&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;“…we encourage you to be as quantitative as possible, even if it is just guesstimating at first.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the 19 strategies:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Targeting Blogs&lt;/strong&gt;: building up from tiny outlets to large&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publicity&lt;/strong&gt;: building relationships with journalists, HARO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unconventional PR&lt;/strong&gt;: stunts, customer appreciation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search Engine Marketing&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Social and Display Ads&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offline Ads&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search Engine Optimization&lt;/strong&gt;: fat-head (narrow ranking) and long-tail (lots of landing page content, content marketing farming) strategies. Google Adword’s Keyword Planner,  Open Site Explorer.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content Marketing&lt;/strong&gt;. Spend 6 months blogging do stuff that doesn’t scale (contact influential people, do guest posts, write about recent news events, nerd out)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email Marketing&lt;/strong&gt;: with your own mailing list or advertise on other mailing lists. Transactional funnel reminders, retention, upselling/expansion, referral emails too.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Viral Marketing&lt;/strong&gt;: map out the loop.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Engineering as Marketing&lt;/strong&gt;: giveaway tools/services (lol, examples are all SEO companies building free SEO tools for marketers, not necessarily engineering)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Business Development&lt;/strong&gt;: partnerships, joint ventures, licensing, distribution, supply. Boil the ocean of potential partners, spreadsheet and pipeline it.  Identify who is in charge of the partner’s metric you’re targeting, and make your cold emails forwardable. Write a memo to yourself afterwords “how the deal was done” (how long it took to get to milestones, key contacts, sticking points, partner’s specific interests and influences)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sales&lt;/strong&gt;. It’s sales! lol, about time wasters (“have you ever brought other technology into your company?”)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Affiliate Programs&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Existing Platforms&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trade Shows&lt;/strong&gt;. Prep, prep, prep.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offline Events&lt;/strong&gt;. Conferences.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speaking Engagements&lt;/strong&gt;. Answer upfront “Why are you important enough to be the one giving the talk? What value can you offer me? …then… what your startup is doing, why you’re doing it, specifically how you got to where you are or where things are going.” Recycle and reuse the same 1 or 2 talks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Community Building&lt;/strong&gt;. Nurturing connections among your customers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There’s not even a conclusion! Just an acknowledgement and an appendix with specific suggested goals for each category in case the short chapters weren’t boiled enough. It’s not hard, it just takes work.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/06/19-sales-marketing-strategies-in-19-weeks&quot;&gt;19 sales &amp; marketing strategies in 19 weeks&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 11 Jun 2023 22:37:00 +0000</pubDate>
  <link>https://island94.org/2023/06/19-sales-marketing-strategies-in-19-weeks</link>
  <guid isPermaLink="true">https://island94.org/2023/06/19-sales-marketing-strategies-in-19-weeks</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Rebuilding Concurrent Ruby: ScheduledTask, Event, and TimerSet</title>
  <description>&lt;p&gt;I’ve been diving into &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby&quot;&gt;Concurrent Ruby library&lt;/a&gt; a lot recently. I use Concurrent Ruby as the foundation for &lt;a href=&quot;https://github.com/bensheldon/good_job&quot;&gt;GoodJob&lt;/a&gt; where it has saved me immense time and grief because it has a lot of reliable, complex thread-safe primitives that are well-shaped for GoodJob’s needs. I’m a big fan of Concurrent Ruby.&lt;/p&gt;

&lt;p&gt;I wanted to cement some of my learnings and understandings by writing a quick blog post to explain how some parts of Concurrent Ruby work, in the spirit of Noah Gibb’s &lt;a href=&quot;https://rebuilding-rails.com/&quot;&gt;&lt;em&gt;Rebuilding Rails&lt;/em&gt;&lt;/a&gt;. In the following, I’ll be sharing runnable Ruby code that is similar to how Concurrent Ruby solves the same kind of problems. That said, &lt;strong&gt;Concurrent Ruby is much, much safer—and thus a little more complex—than what I’m writing here&lt;/strong&gt; so please, if you need this functionality, use Concurrent Ruby directly.&lt;/p&gt;

&lt;h3 id=&quot;the-use-case-future-scheduled-tasks&quot;&gt;The use case: future scheduled tasks&lt;/h3&gt;

&lt;p&gt;Imagine you want to run some bits of code, at a point in time in the future. It might look like this example creating several tasks at once with varying delays in seconds:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# run some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# run some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# run some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Concurrent Ruby, the object to do this is a &lt;a href=&quot;https://ruby-concurrency.github.io/concurrent-ruby/1.2.0/Concurrent/ScheduledTask.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::ScheduledTask&lt;/code&gt;&lt;/a&gt; (good name, right?). A ScheduledTask will wait &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delay&lt;/code&gt; seconds and then run the block of code on a background thread.&lt;/p&gt;

&lt;p&gt;Behind the ScheduledTask is the real star: the &lt;a href=&quot;https://ruby-concurrency.github.io/concurrent-ruby/1.2.0/Concurrent/TimerSet.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::TimerSet&lt;/code&gt;&lt;/a&gt;, which executes a collection of tasks, each after a given delay. Let’s break down the components of a TimerSet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TimerSet maintains a list of tasks, ordered by their delays, with the soonest first&lt;/li&gt;
  &lt;li&gt;TimerSet runs a reactor-like loop in a background thread. This thread will peek at the next occurring task and wait/sleep until it occurs, then pop the task to execute it.&lt;/li&gt;
  &lt;li&gt;TimerSet uses a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Event&lt;/code&gt; (which is like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt; combined in a convenient package) to interrupt the sleeping reactor when new tasks are created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll give examples of each of these. But first, you may be asking….&lt;/p&gt;

&lt;h2 id=&quot;why-is-this-so-hard&quot;&gt;Why is this so hard?&lt;/h2&gt;

&lt;p&gt;This is a lot of objects working together to accomplish the use case. This is why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby threads have a cost, so we can’t simply create a new thread for each and every task, putting it to sleep until an individual task is intended to be triggered. That would be a lot of threads.&lt;/li&gt;
  &lt;li&gt;Ruby threads &lt;a href=&quot;http://headius.blogspot.com/2008/02/rubys-threadraise-threadkill-timeoutrb.html&quot;&gt;aren’t safe be canceled/killed&lt;/a&gt;, so we can’t, for example, create a single thread for the soonest task but then terminate it and create a new thread if new task is created with a sooner time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following section will show how these objects are put together. Again, this is not the exact Concurrent Ruby implementation, but it’s the general shape of how Concurrent Ruby solves this use case.&lt;/p&gt;

&lt;h2 id=&quot;the-event&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Concurrent Ruby describes a &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby/blob/9f40827be9a8a192a6993a8d157bd3ed0662ada0/lib/concurrent-ruby/concurrent/atomic/event.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Event&lt;/code&gt;&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Old school kernel-style event reminiscent of Win32 programming in C++.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t know what that means exactly, but an Event can be in either a set or unset state, and it can wait (with a timeout!) and be awakened via signals across threads.&lt;/p&gt;

&lt;p&gt;I earlier described &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event&lt;/code&gt; as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt; packaged together. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt;is the star here, and the mutex is simply a supporting actor because the ConditionVariable requires it.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/Thread/ConditionVariable.html&quot;&gt;Ruby &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionVariable&lt;/code&gt;&lt;/a&gt; has two features that are perfect for multithreaded programming:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait&lt;/code&gt;, which is blocking and will put a thread to sleep, with an optional timeout&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;, which broadcasts a signal to any waiting threads to wake up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jesse Storimer’s excellent and free ebook &lt;em&gt;Working with Ruby Threads&lt;/em&gt; has a great &lt;a href=&quot;https://workingwithruby.com/wwrt/condvars/&quot;&gt;section on ConditionVariables&lt;/a&gt; and why the mutex is a necessary part of the implementation.&lt;/p&gt;

&lt;p&gt;Here’s some code that implements an Event with an example to show how it can wake up a thread:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ConditionVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broadcast&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s a simple example of an Event running in a loop to show how it might be used:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# A simple loop in a thread&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# loop every second unless signaled&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Event has been set&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Exiting thread&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Event has been set&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Event has been set&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# let the thread exit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Exiting thread&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-scheduledtask&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScheduledTask&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The implementation of the ScheduledTask isn’t too important in this explanation, but I’ll sketch out the necessary pieces, which match up with a &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby/blob/9f40827be9a8a192a6993a8d157bd3ed0662ada0/lib/concurrent-ruby/concurrent/scheduled_task.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::ScheduledTask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# GLOBAL_TIMER_SET = TimerSet.new&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScheduledTask&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:schedule_time&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timer_set: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GLOBAL_TIMER_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scheduled_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timer_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduled_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schedule_time&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple things to call out here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GLOBAL_TIMER_SET&lt;/code&gt; is necessary so that all ScheduledTasks are added to the same TimerSet. In Concurrent Ruby, this is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent.global_timer_set&lt;/code&gt;, though a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScheduledTask.execute&lt;/code&gt; can be given an explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer_set:&lt;/code&gt; parameter if an application has multiple TimerSets (for example, GoodJob initializes its own TimerSet for finer lifecycle management).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&amp;gt;&lt;/code&gt; comparison operator, which will be used to keep our list of tasks sorted with the soonest tasks first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-timerset&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TimerSet&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now we have the pieces necessary to implement a TimerSet and fulfill our use case. The TimerSet implemented here is very similar to a &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby/blob/9f40827be9a8a192a6993a8d157bd3ed0662ada0/lib/concurrent-ruby/concurrent/executor/timer_set.rb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::TimerSet&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerSet&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_tasks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_tasks&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Peek the first item in the queue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Pop the first item in the queue&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schedule_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a lot going on here, but here are the landmarks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In this TimerSet, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@queue&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; that we explicitly call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort!&lt;/code&gt; on so that the soonest task is always first in the array. In the Concurrent Ruby implementation, that’s done more elegantly with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent::Collection::NonConcurrentPriorityQueue&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@mutex&lt;/code&gt; is used to make sure that adding/sorting/peeking/popping operations on the queue are synchronized and safe across threads.&lt;/li&gt;
  &lt;li&gt;The magic happens in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#process_tasks&lt;/code&gt;, which creates a new thread and starts up a loop. It loops over the first task in the queue (the soonest):
    &lt;ul&gt;
      &lt;li&gt;If there is no task, it breaks the loop and exits the thread.&lt;/li&gt;
      &lt;li&gt;If there is a task, it checks whether it’s time to run, and if so, runs it. If it’s not time yet, it uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#wait&lt;/code&gt; until it &lt;em&gt;is&lt;/em&gt; time to run, or 60 seconds, whichever is sooner. That 60 seconds is a magic number in the real implementation, and I assume that’s to reduce clock drift. Remember,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#wait&lt;/code&gt; is signalable, so if a new task is added, the loop will be immediately restarted and the delay recalculated.&lt;/li&gt;
      &lt;li&gt;In real Concurrent Ruby, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task.run&lt;/code&gt; is posted to a separate thread pool where it won’t block or slow down the loop.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#set&lt;/code&gt; is called inside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#add_task&lt;/code&gt; which inserts new tasks into the queue. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process_tasks&lt;/code&gt; background thread is only created &lt;em&gt;the first time&lt;/em&gt; a task is added to the queue after the queue has been emptied. This minimizes the number of active threads.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#reset&lt;/code&gt; is called when the queue is first peeked in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process_tasks&lt;/code&gt;. There’s a lot of subtle race conditions being guarded against in a TimerSet. Calling reset unsets the event at the top of the loop to allow the Event to be set again before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event#wait&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, we can put all of the pieces together to fulfill our use case of scheduled tasks:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;GLOBAL_TIMER_SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TimerSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is the first task&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is the third task&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ScheduledTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is the second task&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GLOBAL_TIMER_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; This is the first task&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; This is the second task&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; This is the third task&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;

&lt;p&gt;The TimerSet is a really neat object that’s powered by an Event, which is itself powered by a ConditionVariable. There’s a lot of fun thread-based signaling happening here!&lt;/p&gt;

&lt;p&gt;While writing my post, I came across a 2014 post from Job Vranish entitled &lt;a href=&quot;https://spin.atomicobject.com/2014/07/07/ruby-queue-pop-timeout/&quot;&gt;“Ruby Queue Pop with Timeout”&lt;/a&gt;, which builds something very similar looking using the same primitives. In the comments, Mike Perham linked to &lt;a href=&quot;https://github.com/mperham/connection_pool/blob/f83b6304c0e5936b1b286b26a73f3febda051c9b/lib/connection_pool/timed_stack.rb&quot;&gt;Connection Pool’s TimedStack&lt;/a&gt; which also looks similar. Again &lt;strong&gt;please use a real library like Concurrent Ruby or Connection Pool.&lt;/strong&gt; This was just for explanatory purposes 👍&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2023/06/rebuilding-concurrent-ruby-scheduledtask-event-and-timerset&quot;&gt;Rebuilding Concurrent Ruby: ScheduledTask, Event, and TimerSet&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 01 Jun 2023 01:44:00 +0000</pubDate>
  <link>https://island94.org/2023/06/rebuilding-concurrent-ruby-scheduledtask-event-and-timerset</link>
  <guid isPermaLink="true">https://island94.org/2023/06/rebuilding-concurrent-ruby-scheduledtask-event-and-timerset</guid>
  
    <category>ruby</category>
  
    <category>GoodJob</category>
  
  
</item>

      
    
  </channel>
</rss>
