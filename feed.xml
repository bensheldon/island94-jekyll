<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found
</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Sep 2024 07:06:48 +0000</pubDate>
    <lastBuildDate>Tue, 24 Sep 2024 07:06:48 +0000</lastBuildDate>
    <generator>Jekyll v4.3.4</generator>
    
    
      
        




<item>
  <title>Seeing like a Rails and Ruby platform team</title>
  <description>&lt;p&gt;When I’m not hacking on GoodJob, I work at GitHub, where I’m the engineering manager of the “Ruby Architecture” team, which is filled with fantastic rubyists. Our team mission is to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make it easy for GitHub engineers to create, deliver, and operate best-of-class Ruby and Rails applications, and share the best of it with the world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an adaptation of a post I published internally at GitHub, and its ensuing discussions, to explain what a team like ours &lt;em&gt;does&lt;/em&gt; when we’re supporting other teams and giving technical feedback. I imagine this is similar to other big companies’ Rails and Ruby platform teams, like &lt;a href=&quot;https://railsatscale.com&quot;&gt;Shopify’s “Ruby Infrastructure” team&lt;/a&gt;. I hope this is useful in thinking about your own Rails and Ruby work, experience, and career development focuses.&lt;/p&gt;

&lt;h3 id=&quot;before-you-architecture&quot;&gt;Before you “architecture”&lt;/h3&gt;

&lt;p&gt;The rest of this post is a big ol’ list of deep Ruby technical topics. To avoid premature optimization and architecture astronautics, I want to just quickly ground some expectations of any technical change you lead:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is it clear what it does, especially to others, who may be yourself in the future?&lt;/li&gt;
  &lt;li&gt;Does it follow established patterns and precedent throughout the codebase, and is it internally consistent with itself?&lt;/li&gt;
  &lt;li&gt;Does it accomplish the business goal? Does it work?&lt;/li&gt;
  &lt;li&gt;Does it not prevent other components from accomplishing their business goals? Does it not break or negatively impact other stuff?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I write these things out because it’s very common, as a technical feature goes through multiple reviews and revisions, to lose sight of its original goals or purpose or business constraints. So set yourself up for success by being clear on that stuff up front, and push back (or go deeper) if someone tells you something needs to change &lt;em&gt;for technical reasons&lt;/em&gt; but it compromises your intended non-technical outcome.&lt;/p&gt;

&lt;h3 id=&quot;architecting-ruby-the-list&quot;&gt;Architecting Ruby, the list&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;A brief note about my authority on this.&lt;/strong&gt; The following list comes out of my experience working on a big Rails and Ruby monolith at GitHub, which has largely co-evolved with Rails and Ruby over the past 15+ years, and alongside 1k+ other engineers. (I’m also a consultant, and worked in a lot of software labs, and untangled a lot of other people’s applications too; and &lt;a href=&quot;https://speakerdeck.com/bensheldon/real-world-dashboard&quot;&gt;not-Rails stuff too&lt;/a&gt;.) Many members of the team are core maintainers of Rails and Ruby, and we &lt;a href=&quot;https://island94.org/2023/01/framing-open-source-contributions-at-work&quot;&gt;treat the Rails Framework as an extension of our application&lt;/a&gt;. Our team is responsible for integrating upstream changes in Rails and Ruby within GitHub’s vast monolith. &lt;strong&gt;We upgrade and integrate Rails and Ruby main/dev/trunk changes weekly!&lt;/strong&gt; (&lt;a href=&quot;https://github.blog/engineering/infrastructure/upgrading-github-from-rails-3-2-to-5-2/&quot;&gt;Never repeat, never forget.&lt;/a&gt;) This continuous practice produces a deep familiarity with how change happens, and where friction builds up between an application and its upstream dependencies. Performing these upgrades over and over leads to experience, and repeated experience leads to intuition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(btw, please reach out if your company has a practice of continuously upgrading Rails main/dev/trunk and running it in production. GitHub and Shopify and Gusto are trying to form a club and we want you in it.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is a general order here, from most important to least in broad strokes. Remember, nothing here is intrinsically bad or should never be done; but in those situations there should be well-considered decision points.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Global namespace and Library/Dependency Privacy Violations&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Avoid monkeypatching or reaching into private methods or objects.&lt;/li&gt;
      &lt;li&gt;The most appropriate place to make changes is upstream.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Safety, Security&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Avoiding thread safety issues, like globally held objects and privacy violations, not leaking data between requests, or retaining big objects in memory.  &lt;a href=&quot;https://rubykaigi.org/2024/presentations/jhawthorn.html&quot;&gt;Profile&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=pQ1XCrwq1qc&quot;&gt;profile&lt;/a&gt;, &lt;a href=&quot;https://island94.org/2024/01/the-answer-is-in-your-heap-debugging-big-rails-memory&quot;&gt;profile&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Seeking object locality (or avoiding globalness) by storing objects on instances of controllers and jobs (or their attributes) and embracing the natural lifecycles provided by the framework. Frequently a developer desires not to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeObject.new&lt;/code&gt; at the usage-site, but to have a DSL-like callable method already ready in the appropriate scope (eg. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_some_object&lt;/code&gt;). We love a good DSL and they can be difficult to get right.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code Loading, Autoloading, and Reloading&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Code autoloading is &lt;a href=&quot;https://github.blog/engineering/infrastructure/upgrading-github-from-rails-3-2-to-5-2/&quot;&gt;one of the most important design-constraints in Rails&lt;/a&gt; that can vastly affect inner-loop development (the “hands-on-keyboard” part) and production availability because of impact to application boot speed.&lt;/li&gt;
      &lt;li&gt;Designing for code loading and autoloading is critical to design, file placement (app vs lib vs config) and dependencies interactions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal to the Ruby VM constraints&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;￼Even though Ruby makes it easy to introspect the runtime ( ￼&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;descendants&lt;/code&gt;￼ or ￼&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subclasses&lt;/code&gt;￼ or ￼&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectSpace&lt;/code&gt;￼) they shouldn’t be used outside of application boot or exception handling (and sparingly even then); they may have performance implications or be overly nuanced and non-deterministic in their output. Using ￼&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callers&lt;/code&gt;￼ and introspecting the Ruby callstack is a particularly expensive operation.&lt;/li&gt;
      &lt;li&gt;While infrequent and not-obvious, some patterns can massively de-optimize the Ruby VM with either localized or global effects. The Ruby VM (or accelerators like YJIT) are unable to optimize certain code patterns, and some patterns may cause VM-internal caches to churn inefficiently or to retain objects and their references unnecessarily (this can get tricky so please partner with us!). You probably want examples:
        &lt;ul&gt;
          &lt;li&gt;OpenStruct (though probably isn’t a reason to use it at all)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance_eval&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Modifying singleton classes (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extend&lt;/code&gt; on objects) (&lt;a href=&quot;https://bugs.ruby-lang.org/issues/19436&quot;&gt;example&lt;/a&gt;)&lt;/li&gt;
          &lt;li&gt;Anything that adds to the callstack (call-wrapping, complicated delegation)&lt;/li&gt;
          &lt;li&gt;(handwaves) Things that YJIT isn’t yet optimized for, things that &lt;a href=&quot;https://railsatscale.com/2023-10-24-memoization-pattern-and-object-shapes/&quot;&gt;deoptimize object shapes&lt;/a&gt;, which is the result of new fast-paths being introduced which now mean there are slow-paths that didn’t previously exist.&lt;/li&gt;
          &lt;li&gt;Native extensions that don’t release the interpreter lock&lt;/li&gt;
          &lt;li&gt;Metaprogramming generally&lt;/li&gt;
          &lt;li&gt;None of these are intrinsically bad (except OpenStruct and poorly done native extensions), and framework and platform level code definitely make use of them. And they’re also constantly changing because of upstream Ruby work. And are maybe ok in isolation but a problem when copied as a pattern or introduced as a part of the platform for broad consumption. Something John Hawthorn has said:
            &lt;blockquote&gt;
              &lt;p&gt;A thought experiment I like to try is asking myself how I would implement this in another language without [Ruby magic]… Adding that constraint can help unblock thinking of simpler, more “normal” approaches without expensive metaprogramming.&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External to the Ruby VM constraints and dependencies (memory, compute, file descriptors, database connections, etc.)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;￼&quot;&gt;Database stuff&lt;/a&gt; alone is a lot. The design prompt everyone is largely working from is “how does one architect an efficient, stateless application that sits between an end-user client and stateful data sources and manages bidirectional transformations of data?” Sounds hard when you put it that way, right?&lt;/li&gt;
      &lt;li&gt;Thinking about resource lifecycle, pooling, and how they interact across the various concurrency models available to use (process forking, threads, etc.). We do expect the frameworks and platform libraries we choose to keep these out of mind for most development tasks 😅&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Design of the thing, for use&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Rails’s model of “convention over configuration” frequently means that how an object is structured and where it’s placed can have an outsized impact on how it behaves: e.g. within App, Lib, Rack Middleware, Other Library Middleware (Faraday, jobs system, etc.), Rails Configuration/Initialization/Railties, and more!&lt;/li&gt;
      &lt;li&gt;…and how those conventions relate to Maintainability, Developer Usability, and Conceptual Integrity.&lt;/li&gt;
      &lt;li&gt;Sometimes what may appear as simply an aesthetic decision can have a functional impact.&lt;/li&gt;
      &lt;li&gt;Identifying atypical or disordered usage patterns. Sometimes a desired behavior can be more of a happy accident than an enforced intention, and it might change upstream because no &lt;a href=&quot;https://www.explainxkcd.com/wiki/index.php/1172:_Workflow&quot;&gt;one expected it to be used that way&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dependency Stewardship&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;In addition to Rails and Ruby, our monolith depends on hundreds of gems, double hundreds of their transitive gem dependencies, and several other runtimes and system libraries.&lt;/li&gt;
      &lt;li&gt;The nature of a monolith is that &lt;em&gt;we go together.&lt;/em&gt; If some dependency isn’t compatible with the latest Rails or Ruby, or any other dependency upgrade, we must adapt. We work upstream, we patch locally, and worst case, we remove and replace the dependency with something more maintainable. All of this takes time and effort and resources.&lt;/li&gt;
      &lt;li&gt;We want to choose dependencies that are well-maintained: their maintainers proactively respond to upstream changes, are responsive to issues and PRs, and &lt;a href=&quot;https://en.wiktionary.org/wiki/MINASWAN&quot;&gt;importantly in Ruby&lt;/a&gt;, are nice. (And to whom we are nice too!) That’s more important than benchmarks.&lt;/li&gt;
      &lt;li&gt;And dependencies should be well architected too, obvs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automating and Scaling: Packwerk, Sorbet, Rubocop&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;We do our best to encode our knowledge and shape the application through tooling; that’s how our team scales!  We send our custom rules upstream, too.&lt;/li&gt;
      &lt;li&gt;But it’s complicated! Sometimes that means that developers may focus on designing their code &lt;a href=&quot;https://island94.org/2024/09/the-novice-problem&quot;&gt;in response to the automated tooling&lt;/a&gt; and ending up with a less effective design or even introduce global risks and impacts to the application. At worst, a developer might even glaze over the linter’s intent by smuggling their design through a spelling or arrangement the linter doesn’t recognize 💀 Unfortunately the most important things are often the most abstract and arguable and difficult to detect or automatically warn about. We regret when we do have to tell folks that an approach is untenable in a PR or even after the fact when we notice production metrics have degraded.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-conclusion-about-lists&quot;&gt;A conclusion about lists&lt;/h3&gt;

&lt;p&gt;I like making &lt;a href=&quot;https://island94.org/2017/01/Engeering-Practice-Ad-Nauseam.html&quot;&gt;lists of things&lt;/a&gt;; I find them helpful. I also realize that &lt;a href=&quot;https://island94.org/2019/07/truths-about-the-interpretation-of-falsehood-articles&quot;&gt;not everyone experiences lists the same way I do&lt;/a&gt;. For me, the purpose of a good laundry list is to be a quick reminder (“don’t forget to wash the handkerchiefs”) and not not an exhaustive list of actionable instructions (“the exact and best temperature to wash this t-shirt and that pair of jeans”). So please reach out to me (&lt;a href=&quot;https://ruby.social/@bensheldon&quot;&gt;Mastodon&lt;/a&gt; / &lt;a href=&quot;https://x.com/bensheldon&quot;&gt;Twitter/X&lt;/a&gt;) if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You think there is something that should be added to the list, or explained in more detail&lt;/li&gt;
  &lt;li&gt;You’re curious how something in the list might apply to a specific thing you have&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d love to chat. Thanks for reading!&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/09/seeing-like-a-rails-and-ruby-platform-team&quot;&gt;Seeing like a Rails and Ruby platform team&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sat, 21 Sep 2024 15:17:00 +0000</pubDate>
  <link>https://island94.org/2024/09/seeing-like-a-rails-and-ruby-platform-team</link>
  <guid isPermaLink="true">https://island94.org/2024/09/seeing-like-a-rails-and-ruby-platform-team</guid>
  
    <category>Rails</category>
  
    <category>Ruby</category>
  
  
</item>

      
    
      
        




<item>
  <title>The secret to perfectly calculate Rails database connection pool size</title>
  <description>&lt;p&gt;Ruby on Rails &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html&quot;&gt;maintains a pool of database connections&lt;/a&gt; for Active Record. When a database connection is needed for querying the database, usually one per thread (though &lt;a href=&quot;https://github.com/rails/rails/pull/51349&quot;&gt;that’s changing to per-transaction&lt;/a&gt;), a connection is checked out of the pool, used, and then returned to the pool. The size of the pool is configured in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt;. The &lt;a href=&quot;https://github.com/rails/rails/blob/dfd1e951aa1aeef06c39fffb2994db8a8fa1914f/railties/lib/rails/generators/rails/app/templates/config/databases/postgresql.yml.tt#L20&quot;&gt;default&lt;/a&gt;, as of Rails 7.2, is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pool: &amp;lt;%%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) { 5 } %&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The database connection pool size is frequently misconfigured. &lt;em&gt;A lot.&lt;/em&gt; How to calculate the database connection pool size is one of the most common questions I get on GoodJob (Hi! I’m the author of GoodJob 👋). I have spent an embarrassingly large amount of time trying to come up with a precise pool size calculator and give advice to take into account Puma threads, and GoodJob async jobs, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_async&lt;/code&gt; queries and everything that might be asking for a database connection at the same time. It’s nearly impossible to get the number exactly right.&lt;/p&gt;

&lt;p&gt;If the connection pool is misconfigured to be &lt;em&gt;too small&lt;/em&gt; , it can slow down web requests and jobs while waiting for a connection to become available, or raise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::ConnectionTimeoutError&lt;/code&gt; if there isn’t a connection available within a reasonable amount of time (5 seconds by default). That’s bad! We never want that to happen. Here’s what you should do:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✨ The secret to perfectly calculate Rails database connection pool size:&lt;/strong&gt; &lt;em&gt;Don’t! Set the pool size to a very large, constant number, and never worry about it again. E.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pool: 100&lt;/code&gt;, and remove the reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAILS_MAX_THREADS&lt;/code&gt; entirely:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/database.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;-- that&apos;s it 👍&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WAIT, WHAT?! Why? I described that bad things happen if the pool size is &lt;em&gt;too small&lt;/em&gt;. Here’s the trick: it’s impossible to set the connection pool size to be &lt;em&gt;too big&lt;/em&gt;. You can’t do it! That’s why it’s always better to set a number that’s too large. And the best number is one that can &lt;em&gt;never&lt;/em&gt; be too small regardless of how you configure (and inevitably reconfigure) your application. Here’s why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Database connections are lazily created and added to the pool &lt;em&gt;as they’re needed&lt;/em&gt;. Your Rails application will never create more database connections than it needs. And the database connection pool reaper removes idle and unused connections from the pool. The pool will never be larger than it needs to be.&lt;/li&gt;
  &lt;li&gt;It’s possible you may run out of available database connections &lt;em&gt;at the database&lt;/em&gt;. For example, Heroku’s new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Essentials-0&lt;/code&gt; Postgres database only has 20 database connections available globally. But any problems you run into won’t be because the database connection pool is too big, it’s because your application is &lt;em&gt;using too many concurrent database connections&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;If you find yourself in a situation where your application is using too many concurrent database connections, you should be configuring and re-sizing &lt;em&gt;the things using database connections concurrently&lt;/em&gt;, not the database connection pool itself:
    &lt;ul&gt;
      &lt;li&gt;Configure the number of Puma threads&lt;/li&gt;
      &lt;li&gt;Configure the number of GoodJob async threads (Solid Queue now has similar functionality too!)&lt;/li&gt;
      &lt;li&gt;Configure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_async&lt;/code&gt; thread pool&lt;/li&gt;
      &lt;li&gt;Configure anything else using a background thread making database queries&lt;/li&gt;
      &lt;li&gt;Configure the number of parallel processes/Puma workers/dynos/containers you’re using, which the database connection pool does not affect anyways.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you still don’t have enough database connections &lt;em&gt;at the database&lt;/em&gt;, then you should increase the number of database connections &lt;em&gt;at the database&lt;/em&gt;. Which means scaling your database, or using a connection multiplexer like PgBouncer. &lt;a href=&quot;https://judoscale.com/tools/heroku-postgresql-connection-calculator&quot;&gt;Judoscale has a nice calculator&lt;/a&gt; to estimate the number of connections you’ll need &lt;em&gt;at the database&lt;/em&gt; (which again, is not the pool size).&lt;/li&gt;
  &lt;li&gt;If, in an incredibly rare case, your application concurrency is very, very spiky and you worry that idle database connections are sitting in the connection pool for too long before they are automatically removed by the connection pool reaper, then configure that:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;idle_timeout&lt;/code&gt;: number of seconds that a connection will be kept unused in the pool before it is automatically disconnected (default: 5 minutes). Set this to zero to keep connections forever.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reaping_frequency&lt;/code&gt;: number of seconds between invocations of the database connection pool reaper to disconnect and remove unused connections from the pool (default: 1 minute)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know this is wild advice, but it’s based on facts and experience. Even Rails maintainers have intentions &lt;a href=&quot;https://github.com/rails/rails/pull/51073#issuecomment-1942762197&quot;&gt;to remove this configuration option entirely&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…we want the pool not to have a limit by default anymore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So please, stop sweating the precise, exact, perfect database connection pool value. Set it to something really big, that can never be too small, and never worry about it again.&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/09/secret-to-rails-database-connection-pool-size&quot;&gt;The secret to perfectly calculate Rails database connection pool size&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 19 Sep 2024 14:33:00 +0000</pubDate>
  <link>https://island94.org/2024/09/secret-to-rails-database-connection-pool-size</link>
  <guid isPermaLink="true">https://island94.org/2024/09/secret-to-rails-database-connection-pool-size</guid>
  
    <category>Rails</category>
  
  
</item>

      
    
      
        




<item>
  <title>The Novice Problem</title>
  <description>&lt;p&gt;Brandon Weaver’s &lt;a href=&quot;https://dev.to/baweaver/beyond-senior-metric-obsessions-1j7p&quot;&gt;“Beyond Senior - Metric Obsessions”&lt;/a&gt; has been stuck in my mind ever since we caught up at a SF Ruby Meetup and chatted about rules-adherence as a general problem:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;…by definition a vast majority of your engineers are likely to be concentrated more towards the novice end of the spectrum, and will frequently over rate themselves on this scale.&lt;/p&gt;

  &lt;p&gt;If folks in the novice to advanced beginner stages are known for a rigid adherence to rules and almost legalistic approach to them what do you think might happen if you give them a giant list of metrics [, coding rules, linter warnings, dependency violations, or type-checking errors]?&lt;/p&gt;

  &lt;p&gt;Will they exercise discretion and nuance? Will they have the ability to prioritize based on that information? Will they make appropriate tradeoffs? [No.]&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;This is coming from the &lt;a href=&quot;https://www.kaizenko.com/the-dreyfus-model-of-skills-acquisition/&quot;&gt;Dreyfus Model of Skills Acquisition&lt;/a&gt;, which is like &lt;a href=&quot;https://island94.org/2018/03/japanese-processes&quot;&gt;Shuhari&lt;/a&gt; but with more levels:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ol&gt;
    &lt;li&gt;Novice:
      &lt;ul&gt;
        &lt;li&gt;“rigid adherence to taught rules or plans”&lt;/li&gt;
        &lt;li&gt;no exercise of “discretionary judgment”&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Advanced beginner
      &lt;ul&gt;
        &lt;li&gt;limited “situational perception”&lt;/li&gt;
        &lt;li&gt;all aspects of work treated separately with equal importance&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Competent
      &lt;ul&gt;
        &lt;li&gt;“coping with crowdedness” (multiple activities, accumulation of information)&lt;/li&gt;
        &lt;li&gt;some perception of actions in relation to goals&lt;/li&gt;
        &lt;li&gt;deliberate planning&lt;/li&gt;
        &lt;li&gt;formulates routines&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Proficient
      &lt;ul&gt;
        &lt;li&gt;holistic view of situation&lt;/li&gt;
        &lt;li&gt;prioritizes importance of aspects&lt;/li&gt;
        &lt;li&gt;“perceives deviations from the normal pattern”&lt;/li&gt;
        &lt;li&gt;employs maxims for guidance, with meanings that adapt to the situation at hand&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Expert
      &lt;ul&gt;
        &lt;li&gt;transcends reliance on rules, guidelines, and maxims&lt;/li&gt;
        &lt;li&gt;“intuitive grasp of situations based on deep, tacit understanding”&lt;/li&gt;
        &lt;li&gt;has “vision of what is possible”&lt;/li&gt;
        &lt;li&gt;uses “analytical approaches” in new situations or in case of problems&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/09/the-novice-problem&quot;&gt;The Novice Problem&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Thu, 12 Sep 2024 17:26:00 +0000</pubDate>
  <link>https://island94.org/2024/09/the-novice-problem</link>
  <guid isPermaLink="true">https://island94.org/2024/09/the-novice-problem</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Notes from Carrierwave to Active Storage</title>
  <description>&lt;p&gt;I recently migrated &lt;a href=&quot;https://dayoftheshirt.com&quot;&gt;Day of the Shirt&lt;/a&gt;, my graphic t-shirt sale aggregator, from storing image attachments with Carrierwave to Active Storage. It went ok! 👍&lt;/p&gt;

&lt;p&gt;There were a couple of things driving this migration, though Carrierwave had served me very well for nearly a decade:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For budgetary reasons, I was moving the storage service from S3 to Digital Ocean Spaces. I knew I’d be doing some sort of data migration regardless.&lt;/li&gt;
  &lt;li&gt;I was using some monkeypatches of Carrierwave v2 that weren’t compatible with Carrierwave v3. So I knew I’d have to dig into the internals anyways if I wanted to stay up to date.&lt;/li&gt;
  &lt;li&gt;I generally trust Rails, and by extension Active Storage, to be reliable stewards when I take them on as a dependency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I had a couple of requirements to work though, largely motivated because images in Day of the Shirt &lt;em&gt;are the content&lt;/em&gt; with dozens or hundreds displayed on a single page:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For budget (slash performance), I need to link directly to image assets. No proxying or redirecting through the Rails app.&lt;/li&gt;
  &lt;li&gt;For SEO, I need to customize the image filenames so they are relevant to the content.&lt;/li&gt;
  &lt;li&gt;For performance (slash availability), I need to pre-process image transformations (convert, scale, crop) before they are published. Dozens of new designs can go up on the homepage at once.&lt;/li&gt;
  &lt;li&gt;For availability, I need to validate that the images are (1) transformable and (2) actually transformed before they are published; invalid or missing images are unacceptable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How’d it go? Great! 🎉 I am now fully switched over to Active Storage. It’s working really well and I was able to meet all of my requirements. Active Storage is very nice, as nice as Carrierwave.&lt;/p&gt;

&lt;p&gt;But the errata? Yes, that’s why I’m writing the blog post, and probably why you’re reading. To document all of the stuff I did that wasn’t in the &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_storage_overview.html&quot;&gt;very excellent Active Storage Rails Guide.&lt;/a&gt; Let’s go through it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Direct Linking to images&lt;/strong&gt; is possible via the method described in this excellent post from Florin Lipan: &lt;a href=&quot;https://lipanski.com/posts/activestorage-cdn-rails-direct-route&quot;&gt;“Serving Active Storage uploads through a CDN with Rails direct routes”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customizing Active Storage filenames&lt;/strong&gt; is possible with a monkeypatch (maybe &lt;a href=&quot;https://github.com/rails/rails/pull/41004&quot;&gt;someday it will be possible directly&lt;/a&gt;). The patch simply adds the specified filename to the end of what otherwise would be a random string; and it seems durable through variants such that the variant extensions will be updated properly when the format is transformed (e.g. from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.png&lt;/code&gt; to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jpg&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/active_storage.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MonkeypatchBlobKey&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; hhw3kzc7wcqyglwi7alno9o5yf2v/the-image-filename.png&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate_unique_secure_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;length: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MINIMUM_TOKEN_LENGTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:active_storage_blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MonkeypatchBlobKey&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Preprocessing variants&lt;/strong&gt; required tapping into some private methods to get the variant names back out of the system. Here’s an example of processing all of the variants when the attachment changes. Beware: attachments happen in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt;, &lt;a href=&quot;https://www.youtube.com/live/78HzHhMnhHY&quot;&gt;which is good&lt;/a&gt;, but means that I had to introduce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published&lt;/code&gt; state to the record to ensure it was not visible until the variants were processed (there is a &lt;a href=&quot;https://github.com/rails/rails/pull/47473&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preprocessed:&lt;/code&gt;&lt;/a&gt; option to process individual variants async in a background job but that, unfortunately, doesn’t meet my needs for synchronizing them all at once):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shirt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_one_attached&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:graphic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attachable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :jpg&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;resize_to_limit: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :jpg&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;resize_to_fill: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :jpg&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:thumb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;resize_to_fill: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :jpg&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;after_commit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:process_graphic_variants_and_publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;if: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saved_changes?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;on: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_graphic_variants&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attachment_variants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:graphic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;processed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;published: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# All of the named variants for an attachment&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# @param attachment [Symbol] the name of the attachment&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# @return Array[Symbol] the names of the variants&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attachment_variants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:named_variants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Validating variants&lt;/strong&gt; was easy with a very nice and well-named gem: &lt;a href=&quot;https://github.com/igorkasyanchuk/active_storage_validations&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_storage_validations&lt;/code&gt;&lt;/a&gt;. It &lt;a href=&quot;https://github.com/igorkasyanchuk/active_storage_validations/blob/ab27760ecee7498e8fcb2a6434157c8cdd81038d/lib/active_storage_validations/metadata.rb#L122&quot;&gt;works really well&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You will have N+1s&lt;/strong&gt;, where you forget to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_attached_*&lt;/code&gt; scopes to some queries. Unfortunately Active Storage’s schema is laid out in a way that it will emit queries to the same model/table &lt;em&gt;even when it’s loading correctly&lt;/em&gt;, so you may get &lt;a href=&quot;https://github.com/flyerhzm/bullet/issues/474&quot;&gt;detection false positives&lt;/a&gt; too. You can see that clearly in the next example with the doubly-nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blob&lt;/code&gt; association.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Active Storage’s schema is a beast&lt;/strong&gt;. I get that it’s gone through a lot of changes, and Named Variants are an amazing hack when you see how they’ve been implemented. And it’s wild. You can see that by how the &lt;a href=&quot;https://github.com/rails/rails/blob/9f178ada796a89c01f952fc05810b58b6f8682fc/activestorage/lib/active_storage/attached/model.rb#L129-L137&quot;&gt;scope for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_attached_*&lt;/code&gt;&lt;/a&gt; is generated:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_attachment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;blob: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;variant_records: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;image_attachment: :blob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;preview_image_attachment: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;blob: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;variant_records: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;image_attachment: :blob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I originally thought that when eager-loading through an association (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Merchant.includes(:shirts)&lt;/code&gt;) I’d have to do something like this (🫠):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Merchant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;shirts: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;blob: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;variant_records: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;image_attachment: :blob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;preview_image_attachment: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;blob: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;variant_records: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;image_attachment: :blob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…but fortunately this seems to work too (💅):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Merchant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:shirts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_attached_graphic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s everything. All in all I’m very happy with the migration 🌅&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/07/notes-from-carrierwave-to-active-storage&quot;&gt;Notes from Carrierwave to Active Storage&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 09 Jul 2024 10:30:00 +0000</pubDate>
  <link>https://island94.org/2024/07/notes-from-carrierwave-to-active-storage</link>
  <guid isPermaLink="true">https://island94.org/2024/07/notes-from-carrierwave-to-active-storage</guid>
  
    <category>Rails</category>
  
  
</item>

      
    
      
        




<item>
  <title>On the importance of Rails code reloading and autoloading</title>
  <description>&lt;p&gt;I’ve elevated to “strongly held belief” that &lt;a href=&quot;https://island94.org/2024/04/a-ruby-meetup-and-3-podcasts&quot;&gt;code reloading and autoloading is &lt;em&gt;the&lt;/em&gt; most important design constraint&lt;/a&gt; when designing or architecting for Ruby on Rails.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code reloading is what powers the “make a code change, refresh the browser, see the result” development loop.&lt;/li&gt;
  &lt;li&gt;Code autoloading is what allows Rails to boot in milliseconds (if you’ve designed for it!) to run generators and application scripts and a single targeted test for tight test-driven-development loops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When &lt;a href=&quot;https://guides.rubyonrails.org/autoloading_and_reloading_constants.html&quot;&gt;autoloading and reloading&lt;/a&gt; just works, it probably isn’t something you think about. When code autoloading and reloading doesn’t work or works poorly, as it has on numerous apps across my career and consulting, it can be maddening:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spending hours “debugging” some code only to realize that your changes were never being run at all.&lt;/li&gt;
  &lt;li&gt;Waiting tens of excruciatingly boring seconds to run a simple test or watching the browser churn away while it slowly waits for a response from the development server.&lt;/li&gt;
  &lt;li&gt;Feeling like you can write the code yourself each time faster than running a scaffold/template generator, repetitively over and over again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code reloading and autoloading not working correctly is a huge pain. It’s not great, at all!&lt;/p&gt;

&lt;p&gt;The history of code reloading and autoloading came up recently in the &lt;a href=&quot;https://www.railsspeed.com&quot;&gt;Rails Performance Slack&lt;/a&gt;. A  developer working on an old Rails application asked what Spork was (a forking preloader), and whether it was necessary (not necessarily). As a Rails Developer who is increasingly aware of my &lt;del&gt;age&lt;/del&gt; experience (I started working with Rails in 2012, long after it first launched in 2004, but it’s still been a minute), I realized I had something to share.&lt;/p&gt;

&lt;p&gt;Over history, various strategies have been taken to make the development loop faster because that’s so important. Those strategies usually boil down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separating the (static) framework code from the (changing, developed) application code and only loading, just in time, what’s needed for the part of the application that’s currently running.&lt;/li&gt;
  &lt;li&gt;Loading/booting the framework code that is unlikely to change, and then only (re-)load the application code when invoking a command or running a test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There have been various approaches to doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forking Preloaders (Spork, though Spring is the more contemporary version): load up the framework code in a process once, then fork into a subprocess when you invoke a command and reload just the application code. Sometimes, things can get out of sync (some application code or state pollutes the primary process), and things get weird/confusing. This is why you’ll hear of people hating on Spring or complaining, “I wasted all day on a development bug, and it turns out I just needed to restart Spring” (the analogous “it was DNS all along” of the Rails world).&lt;/li&gt;
  &lt;li&gt;Bootsnap, though operating on a cache strategy rather than a process-forker, serves a similar purpose of trying to speed up an application’s code loading time. The adoption of Bootsnap, and much, much faster CPUs in general, has largely replaced the usage of Spring in applications (though it’s still okay!).&lt;/li&gt;
  &lt;li&gt;Zeitwerk autoloader also plays a role in this history because it, too, is trying to “solve” the necessity of separating the framework code (which changes infrequently) from the application code during development (which is actively being changed) to produce faster development feedback cycles. Zeitwerk replaced the previous autoloader built into Rails, whose lineage seems to date all the way back to &lt;a href=&quot;https://github.com/bensheldon/rails/commit/ee014ef95ae9746b4228f3bc7c85ac0df28ba1df&quot;&gt;Rails 2.0 circa 2005&lt;/a&gt;. Tell me the history / raison d’être of the original autoloader if you know it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look, a lot of labor has gone into this stuff. It’s important! And it’s easy to get wrong and produce a slow and disordered application where development is a pain. It happens! A lot!&lt;/p&gt;

&lt;p&gt;I wish I could easily leave this post with some kind of &lt;em&gt;nugget&lt;/em&gt; of something actionable to do, but it’s really more like: &lt;strong&gt;please take care&lt;/strong&gt;. Some rules of thumb:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t reference, don’t access, don’t use or touch any constants in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt;, or allow them to be referenced (looking at you, custom Rack Middleware) unless you’re doing so from another constant in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt; (or somewhere that you &lt;em&gt;know&lt;/em&gt; is &lt;a href=&quot;https://island94.org/2023/05/whatever-you-do-don-t-autoload-rails-lib&quot;&gt;autoloaded&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Take care with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/initializers/&lt;/code&gt; and ensure you’re making the most of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveSupport.on_load&lt;/code&gt; hooks. Rails may even be missing &lt;a href=&quot;https://guides.rubyonrails.org/engines.html#available-load-hooks&quot;&gt;some load hooks&lt;/a&gt;, so make an upstream PR if you need to configure an autoloaded object and you can’t. It’s super common to run into trouble; in writing this blog post alone, I discovered a &lt;a href=&quot;https://github.com/textacular/textacular/pull/159&quot;&gt;problem with a gem I use&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;If you’re writing library code, become familiar with the configuration-class-initializer-attribute-pattern dance (my name for it), which is how you’ll get something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.action_view.something = :the_thing&lt;/code&gt; lifted and constantized into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionView::Base.something #=&amp;gt; TheThing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might find luck with this &lt;a href=&quot;https://gist.github.com/bensheldon/ba6532c4216c11dd9ba03487c5a06ee4&quot;&gt;bin/autoload-check script&lt;/a&gt;, that I adapted from something &lt;a href=&quot;https://www.johnhawthorn.com/&quot;&gt;John Hawthorn&lt;/a&gt; originally wrote, giving output like:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❌ Autoloaded constants were referenced during during boot.
These files/constants were autoloaded during the boot process,
which will result in inconsistent behavior and will slow down and
may break development mode. Remove references to these constants
from code loaded at boot.

🚨 ActionView::Base (action_view) referenced by config/initializers/field_error.rb:3:in `&amp;lt;main&amp;gt;&apos;
🚨 ActiveJob::Base (active_job)   referenced by config/initializers/good_job.rb:7:in `block in &amp;lt;main&amp;gt;&apos;
🚨 ActiveRecord::Base (active_record)
                                         /Users/bensheldon/.rbenv/versions/3.3.3/lib/ruby/gems/3.3.0/gems/activerecord-7.1.3.4/lib/active_record/base.rb:338:in `&amp;lt;module:ActiveRecord&amp;gt;&apos;
                                         /Users/bensheldon/.rbenv/versions/3.3.3/lib/ruby/gems/3.3.0/gems/activerecord-7.1.3.4/lib/active_record/base.rb:15:in `&amp;lt;main&amp;gt;&apos;
                                         .....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/07/on-the-importance-of-rails-code-reloading&quot;&gt;On the importance of Rails code reloading and autoloading&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 07 Jul 2024 14:44:00 +0000</pubDate>
  <link>https://island94.org/2024/07/on-the-importance-of-rails-code-reloading</link>
  <guid isPermaLink="true">https://island94.org/2024/07/on-the-importance-of-rails-code-reloading</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Introducing GoodJob v4</title>
  <description>&lt;p&gt;GoodJob version 4.0 has been released! 🎉 GoodJob v4 has breaking changes that should be addressed through a transitionary v3.99 release, but if you’ve kept up with v3.x releases and migrations, you’re likely ready to upgrade 🚀&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/bensheldon/good_job?tab=readme-ov-file#upgrading-v3-to-v4&quot;&gt;README has an upgrade guide&lt;/a&gt;. If you’d like to leave feedback about this release, please comment on the &lt;a href=&quot;https://github.com/bensheldon/good_job/discussions/1396&quot;&gt;GitHub Discussions post 📣&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re not familiar with GoodJob, you can read the &lt;a href=&quot;https://island94.org/2020/07/introducing-goodjob-1-0&quot;&gt;introductory blog post&lt;/a&gt; from four years ago. We’ve come pretty far.&lt;/p&gt;

&lt;h3 id=&quot;breaking-changes-to-job-schema&quot;&gt;Breaking changes to job schema&lt;/h3&gt;

&lt;p&gt;GoodJob v4 changes how job and job execution records are stored in the database; moving from job and executions being commingled in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good_jobs&lt;/code&gt; table to Jobs (still in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good_jobs&lt;/code&gt;) having many discrete Execution records in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good_job_executions&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;To safely upgrade, all unfinished jobs must use the new schema relationship, tracked in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good_jobs.is_discrete&lt;/code&gt; column. This change was transparently introduced in GoodJob &lt;a href=&quot;https://github.com/bensheldon/good_job/releases/tag/v3.15.4&quot;&gt;v3.15.4 (April 2023)&lt;/a&gt;, so your application is likely ready-to-upgrade already if you have kept up with GoodJob updates and migrations. You can check by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.99&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob.v4_ready?&lt;/code&gt; in production or run the following SQL query on the production database and check it returns zero: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT COUNT(*) FROM &quot;good_jobs&quot; WHERE finished_at IS NULL AND is_discrete IS NOT TRUE&lt;/code&gt;. If not all unfinished jobs are stored in the new format, either wait to upgrade until those jobs finish or discard them. If you upgrade prematurely to v4 without allowing those jobs to finish, they may never be performed.&lt;/p&gt;

&lt;h3 id=&quot;other-notable-changes&quot;&gt;Other notable changes&lt;/h3&gt;

&lt;p&gt;GoodJob v4:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only supports Rails 6.1+, CRuby 3.0+ and JRuby 9.4+, Postgres 12+. Rails 6.0 is no longer supported. CRuby 2.6 and 2.7 are no longer supported. JRuby 9.3 is no longer supported.&lt;/li&gt;
  &lt;li&gt;Changes job priority to give smaller numbers higher priority (default: 0), in accordance with Active Job’s definition of priority.&lt;/li&gt;
  &lt;li&gt;Enqueues and executes jobs via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Job&lt;/code&gt; model instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob::Execution&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Changes the behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.good_job.cleanup_interval_jobs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOOD_JOB_CLEANUP_INTERVAL_JOBS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.good_job.cleanup_interval_seconds&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOOD_JOB_CLEANUP_INTERVAL_SECONDS&lt;/code&gt; set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;” &lt;/code&gt; to no longer disable count- or time-based cleanups. Instead, now set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; to disable, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; to run a cleanup after every job execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;/h3&gt;

&lt;p&gt;GoodJob v4 does not introduce any new features on its own. In the 110 releases since GoodJob v3.0 was released (June, 2022), these new features and improvements have been introduced:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job#batches&quot;&gt;Batches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bulk enqueueing including support for Active Job’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform_all_later&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job?tab=readme-ov-file#labelled-jobs&quot;&gt;Labelled jobs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Throttling added to &lt;a href=&quot;https://github.com/bensheldon/good_job?tab=readme-ov-file#concurrency-controls&quot;&gt;Concurrency Controls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Improvements to the &lt;a href=&quot;https://goodjob-demo.herokuapp.com/good_job/jobs&quot;&gt;Web Dashboard&lt;/a&gt;, including Dark Mode, performance dashboard, and improved UI,  and customizable templates.&lt;/li&gt;
  &lt;li&gt;Storage of error backtraces. Improved handling of job error conditions, including signal interruptions. Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob.current_thread_running?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodJob.current_thread_shutting_down?&lt;/code&gt; to support job iteration.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bensheldon/good_job/pull/665&quot;&gt;Ordered Queues&lt;/a&gt;, &lt;a href=&quot;https://github.com/bensheldon/good_job/pull/727&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queue_select_limit&lt;/code&gt;&lt;/a&gt; and further options for configuring queue order and performance.&lt;/li&gt;
  &lt;li&gt;Improvements to Cron / Repeating Jobs.&lt;/li&gt;
  &lt;li&gt;Operational improvements including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; integration, improved health checks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A huge thank you to 88 (!) GoodJob v3.x contributors 🙇🏻&lt;/strong&gt; @afn, @ain2108, @aisayo, @Ajmal, @aki77, @alec-c4, @AndersGM, @andyatkinson, @andynu, @arnaudlevy, @baka-san, @benoittgt, @bforma, @BilalBudhani, @binarygit, @bkeepers, @blafri, @blumhardts, @ckdake, @cmcinnes-mdsol, @coreyaus, @DanielHeath, @defkode, @dixpac, @Earlopain, @eric-christian, @erick-tmr, @esasse, @francois-ferrandis, @frans-k, @gap777, @grncdr, @hahwul, @hidenba, @hss-mateus, @Intrepidd, @isaac, @jgrau, @jklina, @jmarsh24, @jpcamara, @jrochkind, @julienanne, @julik, @LucasKendi, @luizkowalski, @maestromac, @marckohlbrugge, @maxim, @mec, @metalelf0, @michaelglass, @mitchellhenke, @mkrfowler, @morgoth, @Mr0grog, @mthadley, @namiwang, @nickcampbell18, @padde, @patriciomacadden, @paul, @Pauloparakleto, @pgvsalamander, @remy727, @rrunyon, @saksham-jain, @sam1el, @sasha-id, @SebouChu, @segiddins, @SemihCag, @shouichi, @simi, @sparshalc, @stas, @steveroot, @TAGraves, @tagrudev, @thepry, @ur5us, @WailanTirajoh, @yenshirak, @ylansegal, @yshmarov, @zarqman&lt;/p&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/07/introducing-goodjob-v4&quot;&gt;Introducing GoodJob v4&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Sun, 07 Jul 2024 04:44:00 +0000</pubDate>
  <link>https://island94.org/2024/07/introducing-goodjob-v4</link>
  <guid isPermaLink="true">https://island94.org/2024/07/introducing-goodjob-v4</guid>
  
    <category>GoodJob</category>
  
    <category>Rails</category>
  
  
</item>

      
    
      
        




<item>
  <title>Rails Strict Locals, undefined `local_assigns`, and reserved keywords</title>
  <description>&lt;p&gt;&lt;strong&gt;Update: This has been mostly fixed upstream in Rails (Rails 8.0, I think) and &lt;a href=&quot;https://github.com/rails/rails/pull/52209&quot;&gt;documented in the Rails Guides&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Huge thank you to Vojta Drbohlav in the &lt;a href=&quot;https://www.railsspeed.com/&quot;&gt;Rails Performance Slack&lt;/a&gt; for helping me figure this out! 🙇&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Things I learned today about a new-to-me Ruby on Rails feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rail 7.1 added a feature called &lt;a href=&quot;https://blog.kiprosh.com/allow-template-to-set-strict-locals/&quot;&gt;“Strict Locals”&lt;/a&gt; that uses a magic comment in ERB templates to declare required and optional local variables. It looks like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;%# locals: (shirts:, class: nil) %&amp;gt;&lt;/code&gt; which in this example means when rendering the partial, it must be provided a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shirts&lt;/code&gt; parameter and optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; parameter. Having ERB templates act more like callable functions with explicit signatures is a nice feature.&lt;/li&gt;
  &lt;li&gt;When using Rails Strict Locals, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_assigns&lt;/code&gt; variable &lt;a href=&quot;https://github.com/rails/rails/blob/4bb73233413f30fd7217bd7f08af44963f5832b1/actionview/lib/action_view/template.rb#L439-L444&quot;&gt;&lt;em&gt;is not defined&lt;/em&gt;&lt;/a&gt;. You can’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_assigns&lt;/code&gt;. You’ll see an error that looks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionView::Template::Error (undefined local variable or method &apos;local_assigns&apos; for an instance of #&amp;lt;Class:0x0000000130536cc8&amp;gt;)&lt;/code&gt;. &lt;strong&gt;This has been &lt;a href=&quot;https://github.com/rails/rails/pull/52209&quot;&gt;fixed&lt;/a&gt; 🎉 though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_assigns&lt;/code&gt; doesn’t expose default values.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;This is a problem if your template has locals that are also Ruby reserved keywords like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, which can be accessed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_assigns[:class]&lt;/code&gt; &lt;em&gt;unless you start using Strict Locals&lt;/em&gt;.
To access local variables named with reserved keywords in your ERB template when using Strict Locals, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding.local_variable_get(:the_variable_name)&lt;/code&gt;, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding.local_variable_get(:class)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding.local_variable_get(:if)&lt;/code&gt;. &lt;strong&gt;This is still necessary if you want to access reserved keywords &lt;em&gt;with defaults&lt;/em&gt; because the defaults don’t show up in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_assigns&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/06/rails-strict-locals-local_assigns-and-reserved-keywords&quot;&gt;Rails Strict Locals, undefined `local_assigns`, and reserved keywords&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Wed, 19 Jun 2024 22:21:00 +0000</pubDate>
  <link>https://island94.org/2024/06/rails-strict-locals-local_assigns-and-reserved-keywords</link>
  <guid isPermaLink="true">https://island94.org/2024/06/rails-strict-locals-local_assigns-and-reserved-keywords</guid>
  
  
</item>

      
    
      
        




<item>
  <title>Recently, June, 2024</title>
  <description>&lt;ul&gt;
  &lt;li&gt;I finished reading the &lt;a href=&quot;https://www.goodreads.com/series/243623-the-poppy-war&quot;&gt;Poppy Wars trilogy&lt;/a&gt;. It got tiresome by the end. I liked &lt;em&gt;Babel&lt;/em&gt; much more, and I’m probably reading &lt;em&gt;Yellowface&lt;/em&gt; next. I also read &lt;em&gt;Exit Interview&lt;/em&gt;, which was another thrilling entry to the canon of “fantastically brilliant not-men who work in tech for whom it really should go better but unfortunately and predictably doesn’t”.&lt;/li&gt;
  &lt;li&gt;We saw &lt;a href=&quot;https://www.imdb.com/title/tt31520076/&quot;&gt;“Film is dead. Long live film!”&lt;/a&gt; at the Roxie. It was enjoyable, reminded me of my big-Cable-Access-TV-energy days, and also gave far too little screen time to hearing from the film collectors wives (yes, exactly) and children. I thought this was my first movie theater since Covid, but Angelina reminded me we saw the Barbie Movie in a theater.&lt;/li&gt;
  &lt;li&gt;I played Animal Well until the credits roll, and then I read the spoilers and have been going for completionism. Though I don’t imagine I’ll get there before fully losing interest.&lt;/li&gt;
  &lt;li&gt;I joined the Program Committee for RubyConf in Chicago in November. We’re trying to get the Call for Papers/Speakers released this week. Should be a good one.&lt;/li&gt;
  &lt;li&gt;I started working on the GoodJob major version 4 release. It’s simply doing all the breaking changes that were previously warned about. A deprecation-warning made is debt unpaid. It’s not so bad.&lt;/li&gt;
  &lt;li&gt;With my friend Rob, I started volunteering on the backend of &lt;a href=&quot;https://www.knockfordemocracy.org&quot;&gt;Knock for Democracy&lt;/a&gt;. I occasionally see people try to make a Tolstoy-inspired statement like “Healthy applications are all the same, but unhealthy ones are each unhealthy in their own way”. But that’s not true! All the apps that need some TLC have the exact same problems as all the others. Surprise me for once!&lt;/li&gt;
  &lt;li&gt;At work I’m nearly, nearly done with performance feedback and promotion packets and calibrations and all that. It’s the stuff that I truly enjoy as a manager, and also is terrible because of everything that’s outside my control. I also got asked to draw up a Ruby sponsorship budget for the year, which is the most normal administrative thing I think I’ve ever been asked in my (checks watch) 12 years of working in Bay Area tech.&lt;/li&gt;
  &lt;li&gt;I think the days of mobile apps for Day of the Shirt are numbered. I haven’t updated them ever since Apple rejected an update for the olde “Section 4.2: Minimum Functionality” thing, after like 8 freaking years in the App Store already. I did the olde “talk to someone on the phone at Apple who unhelpfully can’t tell me what would be &lt;em&gt;enough&lt;/em&gt; functionality.” And so they’ve just been sitting and recently I got an email from a user that it won’t install on their new Android phone. So that sucks. It was a pain (when I was doing it) to develop 3 separate versions of Day of the Shirt: web, iOS, and Android, so maybe this is a sign to probably just commit to the web.&lt;/li&gt;
  &lt;li&gt;A triple &lt;a href=&quot;https://www.epicurious.com/recipes/food/views/bolognese-meat-sauce-hazan&quot;&gt;recipe of bolognese&lt;/a&gt; is too much for my pot to handle.&lt;/li&gt;
&lt;/ul&gt;

  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/06/recently-june-2024&quot;&gt;Recently, June, 2024&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Mon, 03 Jun 2024 03:56:00 +0000</pubDate>
  <link>https://island94.org/2024/06/recently-june-2024</link>
  <guid isPermaLink="true">https://island94.org/2024/06/recently-june-2024</guid>
  
  
</item>

      
    
      
        




<item>
  <title>A comment on Second Systems</title>
  <description>&lt;p&gt;I recently left this comment on a Pragmatic Engineer review of Fred Brook’s &lt;em&gt;Mythical Man Month&lt;/em&gt; in &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/what-changed-in-50-years-of-computing-8d0&quot;&gt;“What Changed in 50 Years of Computing: Part 2”&lt;/a&gt;. This was what I reacted to:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;strong&gt;Software design and “the second-system effect”&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Brooks covers an interesting phenomenon in Chapter 5: “The Second-System Effect.” He states that architects tend to design their first system well, but they over-engineer the second one, and carry this over-engineering habit on to future systems.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;“This second system is the most dangerous system a [person] ever designs. When [they] do this and [their] third and later ones, [their] prior experiences will confirm each other as to the general characteristics of such systems, and their differences will identify those parts of [their] experience that are particular and not generalizable.”&lt;/p&gt;

    &lt;p&gt;The general tendency is to over-design the second system, using all the ideas and frills that were sidetracked on the first one.”&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;I can see this observation making sense at a time when:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Designing a system took nearly a year&lt;/li&gt;
    &lt;li&gt;System designs were not circulated, pre-internet&lt;/li&gt;
    &lt;li&gt;Architects were separated from “implementers”&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Today, all these assumptions are wrong:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Designing systems takes weeks, not years&lt;/li&gt;
    &lt;li&gt;System designs are commonly written down and critiqued by others. We cover more in the article, Engineering Planning with RFCs, Design Documents and ADRs&lt;/li&gt;
    &lt;li&gt;“Hands-off architects” are increasingly rare at startups, scaleups, and Big Tech&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;As a result, engineers design more than one or two systems in a year and get more feedback, so this “second-system effect” is likely nonexistent.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;And this was my comment/reaction:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;I think the Second-System Effect is still very present.&lt;/p&gt;

  &lt;p&gt;I would say it most frequently manifests as a result of not recognizing Gall’s Law: “all complex systems that work evolved from simpler systems that worked.”&lt;/p&gt;

  &lt;p&gt;What trips people up is usually that they start from a place of “X feature is hard to achieve in the current system” and then they start designing/architecting &lt;em&gt;for&lt;/em&gt; that feature and not recognizing all of the other table-stakes necessities and Chesterton Fences of the current system, which only are recognized and bolted on late in the implementation when it is more difficult and complicated.&lt;/p&gt;

  &lt;p&gt;The phrase “10 years of experience, or 1 year of experience 10 times” comes to mind when thinking of people who only have the experience of implementing a new system once and trivially, and do not have the experience of growing and supporting and maintaining a system they designed over a meaningful lifecycle.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Which also reminds me of a &lt;a href=&quot;https://www.simplermachines.com/exploration-tidying-ecto/&quot;&gt;recent callback&lt;/a&gt; to a &lt;a href=&quot;https://lethain.com/notes-on-tidy-first/&quot;&gt;Will Larson review of Kent Beck’s &lt;em&gt;Tidy First&lt;/em&gt;&lt;/a&gt; about growing software:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;I really enjoyed this book, and reading it I flipped between three predominant thoughts:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;I’ve never seen a team that works this way–do any teams work this way?&lt;/li&gt;
    &lt;li&gt;Most of the ways I’ve seen teams work fall into the “never tidy” camp, which is sort of an implicit belief that software can’t get much better except by replacing it entirely. Which is a bit depressing, if you really think about it&lt;/li&gt;
    &lt;li&gt;Wouldn’t it be inspiring to live in a world where your team believes that software can actually improve without replacing it entirely?&lt;/li&gt;
  &lt;/ul&gt;

&lt;/blockquote&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/04/a-comment-on-second-systems&quot;&gt;A comment on Second Systems&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Tue, 09 Apr 2024 20:33:00 +0000</pubDate>
  <link>https://island94.org/2024/04/a-comment-on-second-systems</link>
  <guid isPermaLink="true">https://island94.org/2024/04/a-comment-on-second-systems</guid>
  
  
</item>

      
    
      
        




<item>
  <title>A Ruby Meetup and 3 Podcasts</title>
  <description>&lt;p&gt;&lt;img src=&quot;/uploads/2024/ruby-meetup-ben.jpg&quot; alt=&quot;Me standing on a small stage in front of a slide with 2 adoptable cats and the GitHub logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last week I spoke at the &lt;a href=&quot;https://evilmartians.com/events/sf-bay-area-ruby-meetup&quot;&gt;SF Bay Area Ruby Meetup&lt;/a&gt;, which was hosted at GitHub HQ, which made for an easy commute for me. Here’s &lt;a href=&quot;https://www.youtube.com/watch?v=9-PWz9nbrT8&amp;amp;t=275s&quot;&gt;the video&lt;/a&gt; and &lt;a href=&quot;https://speakerdeck.com/bensheldon/an-ok-compromise-faster-development-by-designing-for-the-rails-autoloader&quot;&gt;the slides&lt;/a&gt;. My talk was entitled “An OK compromise: Faster development by designing for the Rails autoloader”&lt;/p&gt;

&lt;p&gt;Also, I haven’t shared here the 3 podcasts I did over the past few years. Here they are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.therubyonrailspodcast.com/383&quot;&gt;The Ruby on Rails Podcast&lt;/a&gt; from September, 2021.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DJ9HIjLla_U&quot;&gt;GemRuby Show&lt;/a&gt; from September, 2023.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://topenddevs.com/podcasts/ruby-rogues/episodes/examining-goodjob-solidq-and-more-ruby-623&quot;&gt;The Ruby Rogues&lt;/a&gt; from January, 2024.&lt;/li&gt;
&lt;/ul&gt;


  &lt;br&gt;&lt;br&gt;
  &lt;hr&gt;
  &lt;p&gt;
    This post, &lt;em&gt;&lt;a href=&quot;https://island94.org/2024/04/a-ruby-meetup-and-3-podcasts&quot;&gt;A Ruby Meetup and 3 Podcasts&lt;/a&gt;&lt;/em&gt;, is published on &lt;a href=&quot;https://island94.org&quot;&gt;Island94.org&lt;/a&gt;.
    Tweet me at &lt;a href=&quot;https://twitter.com/bensheldon&quot;&gt;@bensheldon&lt;/a&gt; to discuss it.
  &lt;/p&gt;
</description>
  <pubDate>Fri, 05 Apr 2024 23:44:00 +0000</pubDate>
  <link>https://island94.org/2024/04/a-ruby-meetup-and-3-podcasts</link>
  <guid isPermaLink="true">https://island94.org/2024/04/a-ruby-meetup-and-3-podcasts</guid>
  
    <category>Ruby</category>
  
    <category>media</category>
  
  
</item>

      
    
  </channel>
</rss>
